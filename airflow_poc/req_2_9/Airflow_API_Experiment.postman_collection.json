{
	"info": {
		"_postman_id": "a458a34f-fea3-4d51-9cd8-a5742915fe02",
		"name": "Airflow API (Stable)",
		"description": "# Overview\n\nTo facilitate management, Apache Airflow supports a range of REST API endpoints across its\nobjects.\nThis section provides an overview of the API design, methods, and supported use cases.\n\nMost of the endpoints accept `JSON` as input and return `JSON` responses.\nThis means that you must usually add the following headers to your request:\n```\nContent-type: application/json\nAccept: application/json\n```\n\n## Resources\n\nThe term `resource` refers to a single type of object in the Airflow metadata. An API is broken up by its\nendpoint's corresponding resource.\nThe name of a resource is typically plural and expressed in camelCase. Example: `dagRuns`.\n\nResource names are used as part of endpoint URLs, as well as in API parameters and responses.\n\n## CRUD Operations\n\nThe platform supports **C**reate, **R**ead, **U**pdate, and **D**elete operations on most resources.\nYou can review the standards for these operations and their standard parameters below.\n\nSome endpoints have special behavior as exceptions.\n\n### Create\n\nTo create a resource, you typically submit an HTTP `POST` request with the resource's required metadata\nin the request body.\nThe response returns a `201 Created` response code upon success with the resource's metadata, including\nits internal `id`, in the response body.\n\n### Read\n\nThe HTTP `GET` request can be used to read a resource or to list a number of resources.\n\nA resource's `id` can be submitted in the request parameters to read a specific resource.\nThe response usually returns a `200 OK` response code upon success, with the resource's metadata in\nthe response body.\n\nIf a `GET` request does not include a specific resource `id`, it is treated as a list request.\nThe response usually returns a `200 OK` response code upon success, with an object containing a list\nof resources' metadata in the response body.\n\nWhen reading resources, some common query parameters are usually available. e.g.:\n```\nv1/connections?limit=25&offset=25\n```\n\n|Query Parameter|Type|Description|\n|---------------|----|-----------|\n|limit|integer|Maximum number of objects to fetch. Usually 25 by default|\n|offset|integer|Offset after which to start returning objects. For use with limit query parameter.|\n\n### Update\n\nUpdating a resource requires the resource `id`, and is typically done using an HTTP `PATCH` request,\nwith the fields to modify in the request body.\nThe response usually returns a `200 OK` response code upon success, with information about the modified\nresource in the response body.\n\n### Delete\n\nDeleting a resource requires the resource `id` and is typically executed via an HTTP `DELETE` request.\nThe response usually returns a `204 No Content` response code upon success.\n\n## Conventions\n\n- Resource names are plural and expressed in camelCase.\n- Names are consistent between URL parameter name and field name.\n\n- Field names are in snake_case.\n```json\n{\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"occupied_slots\": 0,\n    \"open_slots\": 0\n    \"queued_slots\": 0,\n    \"running_slots\": 0,\n    \"scheduled_slots\": 0,\n    \"slots\": 0,\n}\n```\n\n### Update Mask\n\nUpdate mask is available as a query parameter in patch endpoints. It is used to notify the\nAPI which fields you want to update. Using `update_mask` makes it easier to update objects\nby helping the server know which fields to update in an object instead of updating all fields.\nThe update request ignores any fields that aren't specified in the field mask, leaving them with\ntheir current values.\n\nExample:\n```\n  resource = request.get('/resource/my-id').json()\n  resource['my_field'] = 'new-value'\n  request.patch('/resource/my-id?update_mask=my_field', data=json.dumps(resource))\n```\n\n## Versioning and Endpoint Lifecycle\n\n- API versioning is not synchronized to specific releases of the Apache Airflow.\n- APIs are designed to be backward compatible.\n- Any changes to the API will first go through a deprecation phase.\n\n# Trying the API\n\nYou can use a third party client, such as [curl](https://curl.haxx.se/), [HTTPie](https://httpie.org/),\n[Postman](https://www.postman.com/) or [the Insomnia rest client](https://insomnia.rest/) to test\nthe Apache Airflow API.\n\nNote that you will need to pass credentials data.\n\nFor e.g., here is how to pause a DAG with [curl](https://curl.haxx.se/), when basic authorization is used:\n```bash\ncurl -X PATCH 'https://example.com/api/v1/dags/{dag_id}?update_mask=is_paused' \\\n-H 'Content-Type: application/json' \\\n--user \"username:password\" \\\n-d '{\n    \"is_paused\": true\n}'\n```\n\nUsing a graphical tool such as [Postman](https://www.postman.com/) or [Insomnia](https://insomnia.rest/),\nit is possible to import the API specifications directly:\n\n1. Download the API specification by clicking the **Download** button at the top of this document\n2. Import the JSON specification in the graphical tool of your choice.\n  - In *Postman*, you can click the **import** button at the top\n  - With *Insomnia*, you can just drag-and-drop the file on the UI\n\nNote that with *Postman*, you can also generate code snippets by selecting a request and clicking on\nthe **Code** button.\n\n## Enabling CORS\n\n[Cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\nis a browser security feature that restricts HTTP requests that are\ninitiated from scripts running in the browser.\n\nFor details on enabling/configuring CORS, see\n[Enabling CORS](https://airflow.apache.org/docs/apache-airflow/stable/security/api.html).\n\n# Authentication\n\nTo be able to meet the requirements of many organizations, Airflow supports many authentication methods,\nand it is even possible to add your own method.\n\nIf you want to check which auth backend is currently set, you can use\n`airflow config get-value api auth_backends` command as in the example below.\n```bash\n$ airflow config get-value api auth_backends\nairflow.api.auth.backend.basic_auth\n```\nThe default is to deny all requests.\n\nFor details on configuring the authentication, see\n[API Authorization](https://airflow.apache.org/docs/apache-airflow/stable/security/api.html).\n\n# Errors\n\nWe follow the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807)\nalso known as Problem Details for HTTP APIs. As with our normal API responses,\nyour client must be prepared to gracefully handle additional members of the response.\n\n## Unauthenticated\n\nThis indicates that the request has not been applied because it lacks valid authentication\ncredentials for the target resource. Please check that you have valid credentials.\n\n## PermissionDenied\n\nThis response means that the server understood the request but refuses to authorize\nit because it lacks sufficient rights to the resource. It happens when you do not have the\nnecessary permission to execute the action you performed. You need to get the appropriate\npermissions in other to resolve this error.\n\n## BadRequest\n\nThis response means that the server cannot or will not process the request due to something\nthat is perceived to be a client error (e.g., malformed request syntax, invalid request message\nframing, or deceptive request routing). To resolve this, please ensure that your syntax is correct.\n\n## NotFound\n\nThis client error response indicates that the server cannot find the requested resource.\n\n## MethodNotAllowed\n\nIndicates that the request method is known by the server but is not supported by the target resource.\n\n## NotAcceptable\n\nThe target resource does not have a current representation that would be acceptable to the user\nagent, according to the proactive negotiation header fields received in the request, and the\nserver is unwilling to supply a default representation.\n\n## AlreadyExists\n\nThe request could not be completed due to a conflict with the current state of the target\nresource, e.g. the resource it tries to create already exists.\n\n## Unknown\n\nThis means that the server encountered an unexpected condition that prevented it from\nfulfilling the request.\n\n\nContact Support:\n Name: Apache Software Foundation\n Email: dev@airflow.apache.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28964035",
		"_collection_link": "https://interstellar-meadow-269192.postman.co/workspace/Airflow-API-2.7.1~ada84700-15f8-4836-9a42-51750fb478ad/collection/28964035-a458a34f-fea3-4d51-9cd8-a5742915fe02?action=share&source=collection_link&creator=28964035"
	},
	"item": [
		{
			"name": "connections",
			"item": [
				{
					"name": "{connection_id}",
					"item": [
						{
							"name": "Get a connection",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/connections/:connection_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections",
										":connection_id"
									],
									"variable": [
										{
											"key": "connection_id",
											"value": "postgres_default"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update a connection",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/connections/:connection_id?update_mask=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections",
										":connection_id"
									],
									"query": [
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										}
									],
									"variable": [
										{
											"key": "connection_id",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}"
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete a connection",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/connections/:connection_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections",
										":connection_id"
									],
									"variable": [
										{
											"key": "connection_id",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/connections/:connection_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												":connection_id"
											],
											"variable": [
												{
													"key": "connection_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "test",
					"item": [
						{
							"name": "Test a connection",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"connection_id\": \"postgres_default\",\n  \"conn_type\": \"postgres\",\n  \"schema\": \"airflow\",\n  \"login\": \"postgres\",\n  \"host\": \"localhost\",\n  \"password\": \"postgres\"\n}\n\n/*{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}*/",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/connections/test",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections",
										"test"
									]
								},
								"description": "Test a connection.\n\n*New in version 2.2.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												"test"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												"test"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												"test"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												"test"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/connections/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"connections",
												"test"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List connections",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/connections?limit=100&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"connections"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "0",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/connections?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"connections\": [\n    {\n      \"connection_id\": \"<string>\",\n      \"conn_type\": \"<string>\",\n      \"description\": \"<string>\",\n      \"host\": \"<string>\",\n      \"login\": \"<string>\",\n      \"schema\": \"<string>\",\n      \"port\": \"<integer>\"\n    },\n    {\n      \"connection_id\": \"<string>\",\n      \"conn_type\": \"<string>\",\n      \"description\": \"<string>\",\n      \"host\": \"<string>\",\n      \"login\": \"<string>\",\n      \"schema\": \"<string>\",\n      \"port\": \"<integer>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/connections?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/connections?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a connection",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/connections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"connections"
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/connections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}"
						},
						{
							"name": "Client specified an invalid argument.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/connections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/connections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"connection_id\": \"<string>\",\n  \"conn_type\": \"<string>\",\n  \"description\": \"<string>\",\n  \"host\": \"<string>\",\n  \"login\": \"<string>\",\n  \"schema\": \"<string>\",\n  \"port\": \"<integer>\",\n  \"password\": \"<string>\",\n  \"extra\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/connections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"connections"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "dags",
			"item": [
				{
					"name": "{dag_id}",
					"item": [
						{
							"name": "clearTaskInstances",
							"item": [
								{
									"name": "Clear a set of task instances",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dry_run\": true,\n  \"task_ids\": [\n    \"<string>\"\n  ],\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"only_failed\": true,\n  \"only_running\": false,\n  \"include_subdags\": \"<boolean>\",\n  \"include_parentdag\": \"<boolean>\",\n  \"reset_dag_runs\": \"<boolean>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": false,\n  \"include_downstream\": false,\n  \"include_future\": false,\n  \"include_past\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id/clearTaskInstances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id",
												"clearTaskInstances"
											],
											"variable": [
												{
													"key": "dag_id",
													"value": "<string>"
												}
											]
										},
										"description": "Clears a set of task instances associated with the DAG for a specified date range.\n"
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_ids\": [\n    \"<string>\"\n  ],\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"only_failed\": true,\n  \"only_running\": false,\n  \"include_subdags\": \"<boolean>\",\n  \"include_parentdag\": \"<boolean>\",\n  \"reset_dag_runs\": \"<boolean>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": false,\n  \"include_downstream\": false,\n  \"include_future\": false,\n  \"include_past\": false\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/clearTaskInstances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"clearTaskInstances"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"task_instances\": [\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"dag_run_id\": \"<string>\"\n    },\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"dag_run_id\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"name": "Request not authenticated due to missing, invalid, authentication info.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_ids\": [\n    \"<string>\"\n  ],\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"only_failed\": true,\n  \"only_running\": false,\n  \"include_subdags\": \"<boolean>\",\n  \"include_parentdag\": \"<boolean>\",\n  \"reset_dag_runs\": \"<boolean>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": false,\n  \"include_downstream\": false,\n  \"include_future\": false,\n  \"include_past\": false\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/clearTaskInstances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"clearTaskInstances"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "Client does not have sufficient permission.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_ids\": [\n    \"<string>\"\n  ],\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"only_failed\": true,\n  \"only_running\": false,\n  \"include_subdags\": \"<boolean>\",\n  \"include_parentdag\": \"<boolean>\",\n  \"reset_dag_runs\": \"<boolean>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": false,\n  \"include_downstream\": false,\n  \"include_future\": false,\n  \"include_past\": false\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/clearTaskInstances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"clearTaskInstances"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "A specified resource is not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_ids\": [\n    \"<string>\"\n  ],\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"only_failed\": true,\n  \"only_running\": false,\n  \"include_subdags\": \"<boolean>\",\n  \"include_parentdag\": \"<boolean>\",\n  \"reset_dag_runs\": \"<boolean>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": false,\n  \"include_downstream\": false,\n  \"include_future\": false,\n  \"include_past\": false\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/clearTaskInstances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"clearTaskInstances"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "dagRuns",
							"item": [
								{
									"name": "{dag_run_id}",
									"item": [
										{
											"name": "taskInstances",
											"item": [
												{
													"name": "{task_id}",
													"item": [
														{
															"name": "setNote",
															"item": [
																{
																	"name": "Update the TaskInstance note.",
																	"request": {
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"note\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/setNote",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id",
																				"setNote"
																			],
																			"variable": [
																				{
																					"key": "dag_id",
																					"value": "<string>"
																				},
																				{
																					"key": "dag_run_id",
																					"value": "<string>"
																				},
																				{
																					"key": "task_id",
																					"value": "<string>"
																				}
																			]
																		},
																		"description": "Update the manual user note of a non-mapped Task Instance.\n\n*New in version 2.5.0*\n"
																	},
																	"response": [
																		{
																			"name": "Success.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"note\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/setNote",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"setNote"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"task_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"duration\": \"<number>\",\n  \"state\": \"failed\",\n  \"try_number\": \"<integer>\",\n  \"map_index\": \"<integer>\",\n  \"max_tries\": \"<integer>\",\n  \"hostname\": \"<string>\",\n  \"unixname\": \"<string>\",\n  \"pool\": \"<string>\",\n  \"pool_slots\": \"<integer>\",\n  \"queue\": \"<string>\",\n  \"priority_weight\": \"<integer>\",\n  \"operator\": \"<string>\",\n  \"queued_when\": \"<string>\",\n  \"pid\": \"<integer>\",\n  \"executor_config\": \"<string>\",\n  \"sla_miss\": {\n    \"task_id\": \"<string>\",\n    \"dag_id\": \"<string>\",\n    \"execution_date\": \"<string>\",\n    \"email_sent\": \"<boolean>\",\n    \"timestamp\": \"<string>\",\n    \"description\": \"<string>\",\n    \"notification_sent\": \"<boolean>\"\n  },\n  \"rendered_fields\": {},\n  \"trigger\": {\n    \"id\": \"<integer>\",\n    \"classpath\": \"<string>\",\n    \"kwargs\": \"<string>\",\n    \"created_date\": \"<string>\",\n    \"triggerer_id\": \"<integer>\"\n  },\n  \"triggerer_job\": {\n    \"id\": \"<integer>\",\n    \"dag_id\": \"<string>\",\n    \"state\": \"<string>\",\n    \"job_type\": \"<string>\",\n    \"start_date\": \"<string>\",\n    \"end_date\": \"<string>\",\n    \"latest_heartbeat\": \"<string>\",\n    \"executor_class\": \"<string>\",\n    \"hostname\": \"<string>\",\n    \"unixname\": \"<string>\"\n  },\n  \"note\": \"<string>\"\n}"
																		},
																		{
																			"name": "Client specified an invalid argument.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"note\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/setNote",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"setNote"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request not authenticated due to missing, invalid, authentication info.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"note\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/setNote",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"setNote"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "Client does not have sufficient permission.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"note\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/setNote",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"setNote"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "A specified resource is not found.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"note\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/setNote",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"setNote"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "{map_index}",
															"item": [
																{
																	"name": "setNote",
																	"item": [
																		{
																			"name": "Update the TaskInstance note.",
																			"request": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"note\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index/setNote",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index",
																						"setNote"
																					],
																					"variable": [
																						{
																							"key": "dag_id",
																							"value": "<string>"
																						},
																						{
																							"key": "dag_run_id",
																							"value": "<string>"
																						},
																						{
																							"key": "task_id",
																							"value": "<string>"
																						},
																						{
																							"key": "map_index",
																							"value": "<integer>"
																						}
																					]
																				},
																				"description": "Update the manual user note of a mapped Task Instance.\n\n*New in version 2.5.0*\n"
																			},
																			"response": [
																				{
																					"name": "Success.",
																					"originalRequest": {
																						"method": "PATCH",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"note\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index/setNote",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								":map_index",
																								"setNote"
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "map_index"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"task_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"duration\": \"<number>\",\n  \"state\": \"failed\",\n  \"try_number\": \"<integer>\",\n  \"map_index\": \"<integer>\",\n  \"max_tries\": \"<integer>\",\n  \"hostname\": \"<string>\",\n  \"unixname\": \"<string>\",\n  \"pool\": \"<string>\",\n  \"pool_slots\": \"<integer>\",\n  \"queue\": \"<string>\",\n  \"priority_weight\": \"<integer>\",\n  \"operator\": \"<string>\",\n  \"queued_when\": \"<string>\",\n  \"pid\": \"<integer>\",\n  \"executor_config\": \"<string>\",\n  \"sla_miss\": {\n    \"task_id\": \"<string>\",\n    \"dag_id\": \"<string>\",\n    \"execution_date\": \"<string>\",\n    \"email_sent\": \"<boolean>\",\n    \"timestamp\": \"<string>\",\n    \"description\": \"<string>\",\n    \"notification_sent\": \"<boolean>\"\n  },\n  \"rendered_fields\": {},\n  \"trigger\": {\n    \"id\": \"<integer>\",\n    \"classpath\": \"<string>\",\n    \"kwargs\": \"<string>\",\n    \"created_date\": \"<string>\",\n    \"triggerer_id\": \"<integer>\"\n  },\n  \"triggerer_job\": {\n    \"id\": \"<integer>\",\n    \"dag_id\": \"<string>\",\n    \"state\": \"<string>\",\n    \"job_type\": \"<string>\",\n    \"start_date\": \"<string>\",\n    \"end_date\": \"<string>\",\n    \"latest_heartbeat\": \"<string>\",\n    \"executor_class\": \"<string>\",\n    \"hostname\": \"<string>\",\n    \"unixname\": \"<string>\"\n  },\n  \"note\": \"<string>\"\n}"
																				},
																				{
																					"name": "Client specified an invalid argument.",
																					"originalRequest": {
																						"method": "PATCH",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"note\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index/setNote",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								":map_index",
																								"setNote"
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "map_index"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request not authenticated due to missing, invalid, authentication info.",
																					"originalRequest": {
																						"method": "PATCH",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"note\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index/setNote",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								":map_index",
																								"setNote"
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "map_index"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "Client does not have sufficient permission.",
																					"originalRequest": {
																						"method": "PATCH",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"note\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index/setNote",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								":map_index",
																								"setNote"
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "map_index"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "A specified resource is not found.",
																					"originalRequest": {
																						"method": "PATCH",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"note\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index/setNote",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								":map_index",
																								"setNote"
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "map_index"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "Get a mapped task instance",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id",
																				":map_index"
																			],
																			"variable": [
																				{
																					"key": "dag_id",
																					"value": "<string>"
																				},
																				{
																					"key": "dag_run_id",
																					"value": "<string>"
																				},
																				{
																					"key": "task_id",
																					"value": "<string>"
																				},
																				{
																					"key": "map_index",
																					"value": "<integer>"
																				}
																			]
																		},
																		"description": "Get details of a mapped task instance.\n\n*New in version 2.3.0*\n"
																	},
																	"response": [
																		{
																			"name": "Success.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"task_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"duration\": \"<number>\",\n  \"state\": \"failed\",\n  \"try_number\": \"<integer>\",\n  \"map_index\": \"<integer>\",\n  \"max_tries\": \"<integer>\",\n  \"hostname\": \"<string>\",\n  \"unixname\": \"<string>\",\n  \"pool\": \"<string>\",\n  \"pool_slots\": \"<integer>\",\n  \"queue\": \"<string>\",\n  \"priority_weight\": \"<integer>\",\n  \"operator\": \"<string>\",\n  \"queued_when\": \"<string>\",\n  \"pid\": \"<integer>\",\n  \"executor_config\": \"<string>\",\n  \"sla_miss\": {\n    \"task_id\": \"<string>\",\n    \"dag_id\": \"<string>\",\n    \"execution_date\": \"<string>\",\n    \"email_sent\": \"<boolean>\",\n    \"timestamp\": \"<string>\",\n    \"description\": \"<string>\",\n    \"notification_sent\": \"<boolean>\"\n  },\n  \"rendered_fields\": {},\n  \"trigger\": {\n    \"id\": \"<integer>\",\n    \"classpath\": \"<string>\",\n    \"kwargs\": \"<string>\",\n    \"created_date\": \"<string>\",\n    \"triggerer_id\": \"<integer>\"\n  },\n  \"triggerer_job\": {\n    \"id\": \"<integer>\",\n    \"dag_id\": \"<string>\",\n    \"state\": \"<string>\",\n    \"job_type\": \"<string>\",\n    \"start_date\": \"<string>\",\n    \"end_date\": \"<string>\",\n    \"latest_heartbeat\": \"<string>\",\n    \"executor_class\": \"<string>\",\n    \"hostname\": \"<string>\",\n    \"unixname\": \"<string>\"\n  },\n  \"note\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request not authenticated due to missing, invalid, authentication info.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "Client does not have sufficient permission.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "A specified resource is not found.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		}
																	]
																},
																{
																	"name": "Updates the state of a mapped task instance",
																	"request": {
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id",
																				":map_index"
																			],
																			"variable": [
																				{
																					"key": "dag_id",
																					"value": "<string>"
																				},
																				{
																					"key": "dag_run_id",
																					"value": "<string>"
																				},
																				{
																					"key": "task_id",
																					"value": "<string>"
																				},
																				{
																					"key": "map_index",
																					"value": "<integer>"
																				}
																			]
																		},
																		"description": "Updates the state for single mapped task instance.\n*New in version 2.5.0*\n"
																	},
																	"response": [
																		{
																			"name": "Success.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"task_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"dag_run_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request not authenticated due to missing, invalid, authentication info.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "Client does not have sufficient permission.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "A specified resource is not found.",
																			"originalRequest": {
																				"method": "PATCH",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/:map_index",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						":map_index"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						},
																						{
																							"key": "map_index"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "listMapped",
															"item": [
																{
																	"name": "List mapped task instances",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/listMapped?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&state=<string>&pool=<string>&pool=<string>&queue=<string>&queue=<string>&order_by=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id",
																				"listMapped"
																			],
																			"query": [
																				{
																					"key": "limit",
																					"value": "100",
																					"description": "The numbers of items to return."
																				},
																				{
																					"key": "offset",
																					"value": "<integer>",
																					"description": "The number of items to skip before starting to collect the result set."
																				},
																				{
																					"key": "execution_date_gte",
																					"value": "<dateTime>",
																					"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																				},
																				{
																					"key": "execution_date_lte",
																					"value": "<dateTime>",
																					"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																				},
																				{
																					"key": "start_date_gte",
																					"value": "<dateTime>",
																					"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																				},
																				{
																					"key": "start_date_lte",
																					"value": "<dateTime>",
																					"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																				},
																				{
																					"key": "end_date_gte",
																					"value": "<dateTime>",
																					"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																				},
																				{
																					"key": "end_date_lte",
																					"value": "<dateTime>",
																					"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																				},
																				{
																					"key": "updated_at_gte",
																					"value": "<dateTime>",
																					"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																				},
																				{
																					"key": "updated_at_lte",
																					"value": "<dateTime>",
																					"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																				},
																				{
																					"key": "duration_gte",
																					"value": "<number>",
																					"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																				},
																				{
																					"key": "duration_lte",
																					"value": "<number>",
																					"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																				},
																				{
																					"key": "state",
																					"value": "<string>",
																					"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																				},
																				{
																					"key": "state",
																					"value": "<string>",
																					"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																				},
																				{
																					"key": "pool",
																					"value": "<string>",
																					"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																				},
																				{
																					"key": "pool",
																					"value": "<string>",
																					"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																				},
																				{
																					"key": "queue",
																					"value": "<string>",
																					"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																				},
																				{
																					"key": "queue",
																					"value": "<string>",
																					"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																				},
																				{
																					"key": "order_by",
																					"value": "<string>",
																					"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
																				}
																			],
																			"variable": [
																				{
																					"key": "dag_id",
																					"value": "<string>"
																				},
																				{
																					"key": "dag_run_id",
																					"value": "<string>"
																				},
																				{
																					"key": "task_id",
																					"value": "<string>"
																				}
																			]
																		},
																		"description": "Get details of all mapped task instances.\n\n*New in version 2.3.0*\n"
																	},
																	"response": [
																		{
																			"name": "Success.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/listMapped?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&pool=<string>&queue=<string>&order_by=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"listMapped"
																					],
																					"query": [
																						{
																							"key": "limit",
																							"value": "100",
																							"description": "The numbers of items to return."
																						},
																						{
																							"key": "offset",
																							"value": "<integer>",
																							"description": "The number of items to skip before starting to collect the result set."
																						},
																						{
																							"key": "execution_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "execution_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "updated_at_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "updated_at_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "duration_gte",
																							"value": "<number>",
																							"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "duration_lte",
																							"value": "<number>",
																							"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																						},
																						{
																							"key": "state",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "pool",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "queue",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "order_by",
																							"value": "<string>",
																							"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"task_instances\": [\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"dag_run_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"start_date\": \"<string>\",\n      \"end_date\": \"<string>\",\n      \"duration\": \"<number>\",\n      \"state\": null,\n      \"try_number\": \"<integer>\",\n      \"map_index\": \"<integer>\",\n      \"max_tries\": \"<integer>\",\n      \"hostname\": \"<string>\",\n      \"unixname\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<integer>\",\n      \"queue\": \"<string>\",\n      \"priority_weight\": \"<integer>\",\n      \"operator\": \"<string>\",\n      \"queued_when\": \"<string>\",\n      \"pid\": \"<integer>\",\n      \"executor_config\": \"<string>\",\n      \"sla_miss\": {\n        \"task_id\": \"<string>\",\n        \"dag_id\": \"<string>\",\n        \"execution_date\": \"<string>\",\n        \"email_sent\": \"<boolean>\",\n        \"timestamp\": \"<string>\",\n        \"description\": \"<string>\",\n        \"notification_sent\": \"<boolean>\"\n      },\n      \"rendered_fields\": {},\n      \"trigger\": {\n        \"id\": \"<integer>\",\n        \"classpath\": \"<string>\",\n        \"kwargs\": \"<string>\",\n        \"created_date\": \"<string>\",\n        \"triggerer_id\": \"<integer>\"\n      },\n      \"triggerer_job\": {\n        \"id\": \"<integer>\",\n        \"dag_id\": \"<string>\",\n        \"state\": \"<string>\",\n        \"job_type\": \"<string>\",\n        \"start_date\": \"<string>\",\n        \"end_date\": \"<string>\",\n        \"latest_heartbeat\": \"<string>\",\n        \"executor_class\": \"<string>\",\n        \"hostname\": \"<string>\",\n        \"unixname\": \"<string>\"\n      },\n      \"note\": \"<string>\"\n    },\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"dag_run_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"start_date\": \"<string>\",\n      \"end_date\": \"<string>\",\n      \"duration\": \"<number>\",\n      \"state\": \"removed\",\n      \"try_number\": \"<integer>\",\n      \"map_index\": \"<integer>\",\n      \"max_tries\": \"<integer>\",\n      \"hostname\": \"<string>\",\n      \"unixname\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<integer>\",\n      \"queue\": \"<string>\",\n      \"priority_weight\": \"<integer>\",\n      \"operator\": \"<string>\",\n      \"queued_when\": \"<string>\",\n      \"pid\": \"<integer>\",\n      \"executor_config\": \"<string>\",\n      \"sla_miss\": {\n        \"task_id\": \"<string>\",\n        \"dag_id\": \"<string>\",\n        \"execution_date\": \"<string>\",\n        \"email_sent\": \"<boolean>\",\n        \"timestamp\": \"<string>\",\n        \"description\": \"<string>\",\n        \"notification_sent\": \"<boolean>\"\n      },\n      \"rendered_fields\": {},\n      \"trigger\": {\n        \"id\": \"<integer>\",\n        \"classpath\": \"<string>\",\n        \"kwargs\": \"<string>\",\n        \"created_date\": \"<string>\",\n        \"triggerer_id\": \"<integer>\"\n      },\n      \"triggerer_job\": {\n        \"id\": \"<integer>\",\n        \"dag_id\": \"<string>\",\n        \"state\": \"<string>\",\n        \"job_type\": \"<string>\",\n        \"start_date\": \"<string>\",\n        \"end_date\": \"<string>\",\n        \"latest_heartbeat\": \"<string>\",\n        \"executor_class\": \"<string>\",\n        \"hostname\": \"<string>\",\n        \"unixname\": \"<string>\"\n      },\n      \"note\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
																		},
																		{
																			"name": "Request not authenticated due to missing, invalid, authentication info.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/listMapped?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&pool=<string>&queue=<string>&order_by=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"listMapped"
																					],
																					"query": [
																						{
																							"key": "limit",
																							"value": "100",
																							"description": "The numbers of items to return."
																						},
																						{
																							"key": "offset",
																							"value": "<integer>",
																							"description": "The number of items to skip before starting to collect the result set."
																						},
																						{
																							"key": "execution_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "execution_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "updated_at_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "updated_at_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "duration_gte",
																							"value": "<number>",
																							"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "duration_lte",
																							"value": "<number>",
																							"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																						},
																						{
																							"key": "state",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "pool",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "queue",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "order_by",
																							"value": "<string>",
																							"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "Client does not have sufficient permission.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/listMapped?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&pool=<string>&queue=<string>&order_by=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"listMapped"
																					],
																					"query": [
																						{
																							"key": "limit",
																							"value": "100",
																							"description": "The numbers of items to return."
																						},
																						{
																							"key": "offset",
																							"value": "<integer>",
																							"description": "The number of items to skip before starting to collect the result set."
																						},
																						{
																							"key": "execution_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "execution_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "updated_at_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "updated_at_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "duration_gte",
																							"value": "<number>",
																							"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "duration_lte",
																							"value": "<number>",
																							"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																						},
																						{
																							"key": "state",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "pool",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "queue",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "order_by",
																							"value": "<string>",
																							"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "A specified resource is not found.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/listMapped?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&pool=<string>&queue=<string>&order_by=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"listMapped"
																					],
																					"query": [
																						{
																							"key": "limit",
																							"value": "100",
																							"description": "The numbers of items to return."
																						},
																						{
																							"key": "offset",
																							"value": "<integer>",
																							"description": "The number of items to skip before starting to collect the result set."
																						},
																						{
																							"key": "execution_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "execution_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "start_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "end_date_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "updated_at_gte",
																							"value": "<dateTime>",
																							"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "updated_at_lte",
																							"value": "<dateTime>",
																							"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																						},
																						{
																							"key": "duration_gte",
																							"value": "<number>",
																							"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																						},
																						{
																							"key": "duration_lte",
																							"value": "<number>",
																							"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																						},
																						{
																							"key": "state",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "pool",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "queue",
																							"value": "<string>",
																							"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																						},
																						{
																							"key": "order_by",
																							"value": "<string>",
																							"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "xcomEntries",
															"item": [
																{
																	"name": "{xcom_key}",
																	"item": [
																		{
																			"name": "Get an XCom entry",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries/:xcom_key?map_index=<integer>&deserialize=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"xcomEntries",
																						":xcom_key"
																					],
																					"query": [
																						{
																							"key": "map_index",
																							"value": "<integer>",
																							"description": "Filter on map index for mapped task."
																						},
																						{
																							"key": "deserialize",
																							"value": "false",
																							"description": "Whether to deserialize an XCom value when using a custom XCom backend.\n\nThe XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value\nthat is potentially expensive to deserialize in the web server. Setting this to true overrides\nthe consideration, and calls `deserialize_value` instead.\n\nThis parameter is not meaningful when using the default XCom backend.\n\n*New in version 2.4.0*\n"
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id",
																							"value": "<string>"
																						},
																						{
																							"key": "dag_run_id",
																							"value": "<string>"
																						},
																						{
																							"key": "task_id",
																							"value": "<string>"
																						},
																						{
																							"key": "xcom_key",
																							"value": "<string>"
																						}
																					]
																				}
																			},
																			"response": [
																				{
																					"name": "Success.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries/:xcom_key?map_index=<integer>&deserialize=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"xcomEntries",
																								":xcom_key"
																							],
																							"query": [
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "deserialize",
																									"value": "false",
																									"description": "Whether to deserialize an XCom value when using a custom XCom backend.\n\nThe XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value\nthat is potentially expensive to deserialize in the web server. Setting this to true overrides\nthe consideration, and calls `deserialize_value` instead.\n\nThis parameter is not meaningful when using the default XCom backend.\n\n*New in version 2.4.0*\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "xcom_key"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"key\": \"<string>\",\n  \"timestamp\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"map_index\": \"<integer>\",\n  \"task_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"value\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request not authenticated due to missing, invalid, authentication info.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries/:xcom_key?map_index=<integer>&deserialize=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"xcomEntries",
																								":xcom_key"
																							],
																							"query": [
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "deserialize",
																									"value": "false",
																									"description": "Whether to deserialize an XCom value when using a custom XCom backend.\n\nThe XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value\nthat is potentially expensive to deserialize in the web server. Setting this to true overrides\nthe consideration, and calls `deserialize_value` instead.\n\nThis parameter is not meaningful when using the default XCom backend.\n\n*New in version 2.4.0*\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "xcom_key"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "Client does not have sufficient permission.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries/:xcom_key?map_index=<integer>&deserialize=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"xcomEntries",
																								":xcom_key"
																							],
																							"query": [
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "deserialize",
																									"value": "false",
																									"description": "Whether to deserialize an XCom value when using a custom XCom backend.\n\nThe XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value\nthat is potentially expensive to deserialize in the web server. Setting this to true overrides\nthe consideration, and calls `deserialize_value` instead.\n\nThis parameter is not meaningful when using the default XCom backend.\n\n*New in version 2.4.0*\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "xcom_key"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "A specified resource is not found.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries/:xcom_key?map_index=<integer>&deserialize=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"xcomEntries",
																								":xcom_key"
																							],
																							"query": [
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "deserialize",
																									"value": "false",
																									"description": "Whether to deserialize an XCom value when using a custom XCom backend.\n\nThe XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value\nthat is potentially expensive to deserialize in the web server. Setting this to true overrides\nthe consideration, and calls `deserialize_value` instead.\n\nThis parameter is not meaningful when using the default XCom backend.\n\n*New in version 2.4.0*\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "xcom_key"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "List XCom entries",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries?map_index=<integer>&xcom_key=<string>&limit=100&offset=<integer>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id",
																				"xcomEntries"
																			],
																			"query": [
																				{
																					"key": "map_index",
																					"value": "<integer>",
																					"description": "Filter on map index for mapped task."
																				},
																				{
																					"key": "xcom_key",
																					"value": "<string>",
																					"description": "Only filter the XCom records which have the provided key."
																				},
																				{
																					"key": "limit",
																					"value": "100",
																					"description": "The numbers of items to return."
																				},
																				{
																					"key": "offset",
																					"value": "<integer>",
																					"description": "The number of items to skip before starting to collect the result set."
																				}
																			],
																			"variable": [
																				{
																					"key": "dag_id",
																					"value": "<string>"
																				},
																				{
																					"key": "dag_run_id",
																					"value": "<string>"
																				},
																				{
																					"key": "task_id",
																					"value": "<string>"
																				}
																			]
																		},
																		"description": "This endpoint allows specifying `~` as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG runs and task instances. XCom values won't be returned as they can be large. Use this endpoint to get a list of XCom entries and then fetch individual entry to get value."
																	},
																	"response": [
																		{
																			"name": "Success.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries?map_index=<integer>&xcom_key=<string>&limit=100&offset=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"xcomEntries"
																					],
																					"query": [
																						{
																							"key": "map_index",
																							"value": "<integer>",
																							"description": "Filter on map index for mapped task."
																						},
																						{
																							"key": "xcom_key",
																							"value": "<string>",
																							"description": "Only filter the XCom records which have the provided key."
																						},
																						{
																							"key": "limit",
																							"value": "100",
																							"description": "The numbers of items to return."
																						},
																						{
																							"key": "offset",
																							"value": "<integer>",
																							"description": "The number of items to skip before starting to collect the result set."
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"xcom_entries\": [\n    {\n      \"key\": \"<string>\",\n      \"timestamp\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"map_index\": \"<integer>\",\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\"\n    },\n    {\n      \"key\": \"<string>\",\n      \"timestamp\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"map_index\": \"<integer>\",\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
																		},
																		{
																			"name": "Request not authenticated due to missing, invalid, authentication info.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries?map_index=<integer>&xcom_key=<string>&limit=100&offset=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"xcomEntries"
																					],
																					"query": [
																						{
																							"key": "map_index",
																							"value": "<integer>",
																							"description": "Filter on map index for mapped task."
																						},
																						{
																							"key": "xcom_key",
																							"value": "<string>",
																							"description": "Only filter the XCom records which have the provided key."
																						},
																						{
																							"key": "limit",
																							"value": "100",
																							"description": "The numbers of items to return."
																						},
																						{
																							"key": "offset",
																							"value": "<integer>",
																							"description": "The number of items to skip before starting to collect the result set."
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "Client does not have sufficient permission.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/xcomEntries?map_index=<integer>&xcom_key=<string>&limit=100&offset=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"xcomEntries"
																					],
																					"query": [
																						{
																							"key": "map_index",
																							"value": "<integer>",
																							"description": "Filter on map index for mapped task."
																						},
																						{
																							"key": "xcom_key",
																							"value": "<string>",
																							"description": "Only filter the XCom records which have the provided key."
																						},
																						{
																							"key": "limit",
																							"value": "100",
																							"description": "The numbers of items to return."
																						},
																						{
																							"key": "offset",
																							"value": "<integer>",
																							"description": "The number of items to skip before starting to collect the result set."
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "links",
															"item": [
																{
																	"name": "List extra links",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/links",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id",
																				"links"
																			],
																			"variable": [
																				{
																					"key": "dag_id",
																					"value": "<string>"
																				},
																				{
																					"key": "dag_run_id",
																					"value": "<string>"
																				},
																				{
																					"key": "task_id",
																					"value": "<string>"
																				}
																			]
																		},
																		"description": "List extra links for task instance.\n"
																	},
																	"response": [
																		{
																			"name": "Success.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/links",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"links"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"extra_links\": [\n    {\n      \"class_ref\": {\n        \"module_path\": \"<string>\",\n        \"class_name\": \"<string>\"\n      },\n      \"name\": \"<string>\",\n      \"href\": \"<string>\"\n    },\n    {\n      \"class_ref\": {\n        \"module_path\": \"<string>\",\n        \"class_name\": \"<string>\"\n      },\n      \"name\": \"<string>\",\n      \"href\": \"<string>\"\n    }\n  ]\n}"
																		},
																		{
																			"name": "Request not authenticated due to missing, invalid, authentication info.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/links",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"links"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "Client does not have sufficient permission.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/links",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"links"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		},
																		{
																			"name": "A specified resource is not found.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/links",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"links"
																					],
																					"variable": [
																						{
																							"key": "dag_id"
																						},
																						{
																							"key": "dag_run_id"
																						},
																						{
																							"key": "task_id"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "logs",
															"item": [
																{
																	"name": "{task_try_number}",
																	"item": [
																		{
																			"name": "Get logs",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/logs/:task_try_number?full_content=<boolean>&map_index=<integer>&token=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"dags",
																						":dag_id",
																						"dagRuns",
																						":dag_run_id",
																						"taskInstances",
																						":task_id",
																						"logs",
																						":task_try_number"
																					],
																					"query": [
																						{
																							"key": "full_content",
																							"value": "<boolean>",
																							"description": "A full content will be returned.\nBy default, only the first fragment will be returned.\n"
																						},
																						{
																							"key": "map_index",
																							"value": "<integer>",
																							"description": "Filter on map index for mapped task."
																						},
																						{
																							"key": "token",
																							"value": "<string>",
																							"description": "A token that allows you to continue fetching logs.\nIf passed, it will specify the location from which the download should be continued.\n"
																						}
																					],
																					"variable": [
																						{
																							"key": "dag_id",
																							"value": "<string>"
																						},
																						{
																							"key": "dag_run_id",
																							"value": "<string>"
																						},
																						{
																							"key": "task_id",
																							"value": "<string>"
																						},
																						{
																							"key": "task_try_number",
																							"value": "<integer>"
																						}
																					]
																				},
																				"description": "Get logs for a specific task instance and its try number.\nTo get log from specific character position, following way of using\nURLSafeSerializer can be used.\n\nExample:\n```\nfrom itsdangerous.url_safe import URLSafeSerializer\n\nrequest_url = f\"api/v1/dags/{DAG_ID}/dagRuns/{RUN_ID}/taskInstances/{TASK_ID}/logs/1\"\nkey = app.config[\"SECRET_KEY\"]\nserializer = URLSafeSerializer(key)\ntoken = serializer.dumps({\"log_pos\": 10000})\n\nresponse = self.client.get(\n    request_url,\n    query_string={\"token\": token},\n    headers={\"Accept\": \"text/plain\"},\n    environ_overrides={\"REMOTE_USER\": \"test\"},\n)\ncontinuation_token = response.json[\"continuation_token\"]\n    metadata = URLSafeSerializer(key).loads(continuation_token)\n    log_pos = metadata[\"log_pos\"]\n    end_of_log = metadata[\"end_of_log\"]\n```\nIf log_pos is passed as 10000 like the above example, it renders the logs starting\nfrom char position 10000 to last (not the end as the logs may be tailing behind in\nrunning state). This way pagination can be done with metadata as part of the token.\n"
																			},
																			"response": [
																				{
																					"name": "Success.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/logs/:task_try_number?full_content=<boolean>&map_index=<integer>&token=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"logs",
																								":task_try_number"
																							],
																							"query": [
																								{
																									"key": "full_content",
																									"value": "<boolean>",
																									"description": "A full content will be returned.\nBy default, only the first fragment will be returned.\n"
																								},
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "token",
																									"value": "<string>",
																									"description": "A token that allows you to continue fetching logs.\nIf passed, it will specify the location from which the download should be continued.\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "task_try_number"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"continuation_token\": \"<string>\",\n  \"content\": \"<string>\"\n}"
																				},
																				{
																					"name": "Client specified an invalid argument.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/logs/:task_try_number?full_content=<boolean>&map_index=<integer>&token=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"logs",
																								":task_try_number"
																							],
																							"query": [
																								{
																									"key": "full_content",
																									"value": "<boolean>",
																									"description": "A full content will be returned.\nBy default, only the first fragment will be returned.\n"
																								},
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "token",
																									"value": "<string>",
																									"description": "A token that allows you to continue fetching logs.\nIf passed, it will specify the location from which the download should be continued.\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "task_try_number"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request not authenticated due to missing, invalid, authentication info.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/logs/:task_try_number?full_content=<boolean>&map_index=<integer>&token=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"logs",
																								":task_try_number"
																							],
																							"query": [
																								{
																									"key": "full_content",
																									"value": "<boolean>",
																									"description": "A full content will be returned.\nBy default, only the first fragment will be returned.\n"
																								},
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "token",
																									"value": "<string>",
																									"description": "A token that allows you to continue fetching logs.\nIf passed, it will specify the location from which the download should be continued.\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "task_try_number"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "Client does not have sufficient permission.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/logs/:task_try_number?full_content=<boolean>&map_index=<integer>&token=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"logs",
																								":task_try_number"
																							],
																							"query": [
																								{
																									"key": "full_content",
																									"value": "<boolean>",
																									"description": "A full content will be returned.\nBy default, only the first fragment will be returned.\n"
																								},
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "token",
																									"value": "<string>",
																									"description": "A token that allows you to continue fetching logs.\nIf passed, it will specify the location from which the download should be continued.\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "task_try_number"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				},
																				{
																					"name": "A specified resource is not found.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id/logs/:task_try_number?full_content=<boolean>&map_index=<integer>&token=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"dags",
																								":dag_id",
																								"dagRuns",
																								":dag_run_id",
																								"taskInstances",
																								":task_id",
																								"logs",
																								":task_try_number"
																							],
																							"query": [
																								{
																									"key": "full_content",
																									"value": "<boolean>",
																									"description": "A full content will be returned.\nBy default, only the first fragment will be returned.\n"
																								},
																								{
																									"key": "map_index",
																									"value": "<integer>",
																									"description": "Filter on map index for mapped task."
																								},
																								{
																									"key": "token",
																									"value": "<string>",
																									"description": "A token that allows you to continue fetching logs.\nIf passed, it will specify the location from which the download should be continued.\n"
																								}
																							],
																							"variable": [
																								{
																									"key": "dag_id"
																								},
																								{
																									"key": "dag_run_id"
																								},
																								{
																									"key": "task_id"
																								},
																								{
																									"key": "task_try_number"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																}
															]
														},
														{
															"name": "Get a task instance",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"taskInstances",
																		":task_id"
																	],
																	"variable": [
																		{
																			"key": "dag_id",
																			"value": "<string>"
																		},
																		{
																			"key": "dag_run_id",
																			"value": "<string>"
																		},
																		{
																			"key": "task_id",
																			"value": "<string>"
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "Success.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"task_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"start_date\": \"<string>\",\n  \"end_date\": \"<string>\",\n  \"duration\": \"<number>\",\n  \"state\": \"failed\",\n  \"try_number\": \"<integer>\",\n  \"map_index\": \"<integer>\",\n  \"max_tries\": \"<integer>\",\n  \"hostname\": \"<string>\",\n  \"unixname\": \"<string>\",\n  \"pool\": \"<string>\",\n  \"pool_slots\": \"<integer>\",\n  \"queue\": \"<string>\",\n  \"priority_weight\": \"<integer>\",\n  \"operator\": \"<string>\",\n  \"queued_when\": \"<string>\",\n  \"pid\": \"<integer>\",\n  \"executor_config\": \"<string>\",\n  \"sla_miss\": {\n    \"task_id\": \"<string>\",\n    \"dag_id\": \"<string>\",\n    \"execution_date\": \"<string>\",\n    \"email_sent\": \"<boolean>\",\n    \"timestamp\": \"<string>\",\n    \"description\": \"<string>\",\n    \"notification_sent\": \"<boolean>\"\n  },\n  \"rendered_fields\": {},\n  \"trigger\": {\n    \"id\": \"<integer>\",\n    \"classpath\": \"<string>\",\n    \"kwargs\": \"<string>\",\n    \"created_date\": \"<string>\",\n    \"triggerer_id\": \"<integer>\"\n  },\n  \"triggerer_job\": {\n    \"id\": \"<integer>\",\n    \"dag_id\": \"<string>\",\n    \"state\": \"<string>\",\n    \"job_type\": \"<string>\",\n    \"start_date\": \"<string>\",\n    \"end_date\": \"<string>\",\n    \"latest_heartbeat\": \"<string>\",\n    \"executor_class\": \"<string>\",\n    \"hostname\": \"<string>\",\n    \"unixname\": \"<string>\"\n  },\n  \"note\": \"<string>\"\n}"
																},
																{
																	"name": "Request not authenticated due to missing, invalid, authentication info.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																},
																{
																	"name": "Client does not have sufficient permission.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																},
																{
																	"name": "A specified resource is not found.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																}
															]
														},
														{
															"name": "Updates the state of a task instance",
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"taskInstances",
																		":task_id"
																	],
																	"variable": [
																		{
																			"key": "dag_id",
																			"value": "<string>"
																		},
																		{
																			"key": "dag_run_id",
																			"value": "<string>"
																		},
																		{
																			"key": "task_id",
																			"value": "<string>"
																		}
																	]
																},
																"description": "Updates the state for single task instance.\n*New in version 2.5.0*\n"
															},
															"response": [
																{
																	"name": "Success.",
																	"originalRequest": {
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"task_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"dag_run_id\": \"<string>\"\n}"
																},
																{
																	"name": "Request not authenticated due to missing, invalid, authentication info.",
																	"originalRequest": {
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																},
																{
																	"name": "Client does not have sufficient permission.",
																	"originalRequest": {
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																},
																{
																	"name": "A specified resource is not found.",
																	"originalRequest": {
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"skipped\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances/:task_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				":dag_id",
																				"dagRuns",
																				":dag_run_id",
																				"taskInstances",
																				":task_id"
																			],
																			"variable": [
																				{
																					"key": "dag_id"
																				},
																				{
																					"key": "dag_run_id"
																				},
																				{
																					"key": "task_id"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "List task instances",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&state=<string>&pool=<string>&pool=<string>&queue=<string>&queue=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id",
																"taskInstances"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "100",
																	"description": "The numbers of items to return."
																},
																{
																	"key": "offset",
																	"value": "<integer>",
																	"description": "The number of items to skip before starting to collect the result set."
																},
																{
																	"key": "execution_date_gte",
																	"value": "<dateTime>",
																	"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																},
																{
																	"key": "execution_date_lte",
																	"value": "<dateTime>",
																	"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																},
																{
																	"key": "start_date_gte",
																	"value": "<dateTime>",
																	"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																},
																{
																	"key": "start_date_lte",
																	"value": "<dateTime>",
																	"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																},
																{
																	"key": "end_date_gte",
																	"value": "<dateTime>",
																	"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																},
																{
																	"key": "end_date_lte",
																	"value": "<dateTime>",
																	"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																},
																{
																	"key": "updated_at_gte",
																	"value": "<dateTime>",
																	"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																},
																{
																	"key": "updated_at_lte",
																	"value": "<dateTime>",
																	"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																},
																{
																	"key": "duration_gte",
																	"value": "<number>",
																	"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																},
																{
																	"key": "duration_lte",
																	"value": "<number>",
																	"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																},
																{
																	"key": "state",
																	"value": "<string>",
																	"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																},
																{
																	"key": "state",
																	"value": "<string>",
																	"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																},
																{
																	"key": "pool",
																	"value": "<string>",
																	"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																},
																{
																	"key": "pool",
																	"value": "<string>",
																	"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																},
																{
																	"key": "queue",
																	"value": "<string>",
																	"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																},
																{
																	"key": "queue",
																	"value": "<string>",
																	"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																}
															],
															"variable": [
																{
																	"key": "dag_id",
																	"value": "<string>"
																},
																{
																	"key": "dag_run_id",
																	"value": "<string>"
																}
															]
														},
														"description": "This endpoint allows specifying `~` as the dag_id, dag_run_id to retrieve DAG runs for all DAGs and DAG runs.\n"
													},
													"response": [
														{
															"name": "Success.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&pool=<string>&queue=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"taskInstances"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "The numbers of items to return."
																		},
																		{
																			"key": "offset",
																			"value": "<integer>",
																			"description": "The number of items to skip before starting to collect the result set."
																		},
																		{
																			"key": "execution_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "execution_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "start_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "start_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "end_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "end_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "updated_at_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																		},
																		{
																			"key": "updated_at_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																		},
																		{
																			"key": "duration_gte",
																			"value": "<number>",
																			"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "duration_lte",
																			"value": "<number>",
																			"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																		},
																		{
																			"key": "state",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		},
																		{
																			"key": "pool",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		},
																		{
																			"key": "queue",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		}
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"task_instances\": [\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"dag_run_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"start_date\": \"<string>\",\n      \"end_date\": \"<string>\",\n      \"duration\": \"<number>\",\n      \"state\": null,\n      \"try_number\": \"<integer>\",\n      \"map_index\": \"<integer>\",\n      \"max_tries\": \"<integer>\",\n      \"hostname\": \"<string>\",\n      \"unixname\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<integer>\",\n      \"queue\": \"<string>\",\n      \"priority_weight\": \"<integer>\",\n      \"operator\": \"<string>\",\n      \"queued_when\": \"<string>\",\n      \"pid\": \"<integer>\",\n      \"executor_config\": \"<string>\",\n      \"sla_miss\": {\n        \"task_id\": \"<string>\",\n        \"dag_id\": \"<string>\",\n        \"execution_date\": \"<string>\",\n        \"email_sent\": \"<boolean>\",\n        \"timestamp\": \"<string>\",\n        \"description\": \"<string>\",\n        \"notification_sent\": \"<boolean>\"\n      },\n      \"rendered_fields\": {},\n      \"trigger\": {\n        \"id\": \"<integer>\",\n        \"classpath\": \"<string>\",\n        \"kwargs\": \"<string>\",\n        \"created_date\": \"<string>\",\n        \"triggerer_id\": \"<integer>\"\n      },\n      \"triggerer_job\": {\n        \"id\": \"<integer>\",\n        \"dag_id\": \"<string>\",\n        \"state\": \"<string>\",\n        \"job_type\": \"<string>\",\n        \"start_date\": \"<string>\",\n        \"end_date\": \"<string>\",\n        \"latest_heartbeat\": \"<string>\",\n        \"executor_class\": \"<string>\",\n        \"hostname\": \"<string>\",\n        \"unixname\": \"<string>\"\n      },\n      \"note\": \"<string>\"\n    },\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"dag_run_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"start_date\": \"<string>\",\n      \"end_date\": \"<string>\",\n      \"duration\": \"<number>\",\n      \"state\": \"removed\",\n      \"try_number\": \"<integer>\",\n      \"map_index\": \"<integer>\",\n      \"max_tries\": \"<integer>\",\n      \"hostname\": \"<string>\",\n      \"unixname\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<integer>\",\n      \"queue\": \"<string>\",\n      \"priority_weight\": \"<integer>\",\n      \"operator\": \"<string>\",\n      \"queued_when\": \"<string>\",\n      \"pid\": \"<integer>\",\n      \"executor_config\": \"<string>\",\n      \"sla_miss\": {\n        \"task_id\": \"<string>\",\n        \"dag_id\": \"<string>\",\n        \"execution_date\": \"<string>\",\n        \"email_sent\": \"<boolean>\",\n        \"timestamp\": \"<string>\",\n        \"description\": \"<string>\",\n        \"notification_sent\": \"<boolean>\"\n      },\n      \"rendered_fields\": {},\n      \"trigger\": {\n        \"id\": \"<integer>\",\n        \"classpath\": \"<string>\",\n        \"kwargs\": \"<string>\",\n        \"created_date\": \"<string>\",\n        \"triggerer_id\": \"<integer>\"\n      },\n      \"triggerer_job\": {\n        \"id\": \"<integer>\",\n        \"dag_id\": \"<string>\",\n        \"state\": \"<string>\",\n        \"job_type\": \"<string>\",\n        \"start_date\": \"<string>\",\n        \"end_date\": \"<string>\",\n        \"latest_heartbeat\": \"<string>\",\n        \"executor_class\": \"<string>\",\n        \"hostname\": \"<string>\",\n        \"unixname\": \"<string>\"\n      },\n      \"note\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
														},
														{
															"name": "Request not authenticated due to missing, invalid, authentication info.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&pool=<string>&queue=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"taskInstances"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "The numbers of items to return."
																		},
																		{
																			"key": "offset",
																			"value": "<integer>",
																			"description": "The number of items to skip before starting to collect the result set."
																		},
																		{
																			"key": "execution_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "execution_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "start_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "start_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "end_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "end_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "updated_at_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																		},
																		{
																			"key": "updated_at_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																		},
																		{
																			"key": "duration_gte",
																			"value": "<number>",
																			"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "duration_lte",
																			"value": "<number>",
																			"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																		},
																		{
																			"key": "state",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		},
																		{
																			"key": "pool",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		},
																		{
																			"key": "queue",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		}
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "Client does not have sufficient permission.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/taskInstances?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&duration_gte=<number>&duration_lte=<number>&state=<string>&pool=<string>&queue=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"taskInstances"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "The numbers of items to return."
																		},
																		{
																			"key": "offset",
																			"value": "<integer>",
																			"description": "The number of items to skip before starting to collect the result set."
																		},
																		{
																			"key": "execution_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "execution_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "start_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "start_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "end_date_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "end_date_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "updated_at_gte",
																			"value": "<dateTime>",
																			"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																		},
																		{
																			"key": "updated_at_lte",
																			"value": "<dateTime>",
																			"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
																		},
																		{
																			"key": "duration_gte",
																			"value": "<number>",
																			"description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
																		},
																		{
																			"key": "duration_lte",
																			"value": "<number>",
																			"description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
																		},
																		{
																			"key": "state",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		},
																		{
																			"key": "pool",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		},
																		{
																			"key": "queue",
																			"value": "<string>",
																			"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
																		}
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "clear",
											"item": [
												{
													"name": "Clear a DAG run",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"dry_run\": true\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/clear",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id",
																"clear"
															],
															"variable": [
																{
																	"key": "dag_id",
																	"value": "<string>"
																},
																{
																	"key": "dag_run_id",
																	"value": "<string>"
																}
															]
														},
														"description": "Clear a DAG run.\n\n*New in version 2.4.0*\n"
													},
													"response": [
														{
															"name": "Success.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"dry_run\": true\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/clear",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"clear"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}"
														},
														{
															"name": "Client specified an invalid argument.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"dry_run\": true\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/clear",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"clear"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "Request not authenticated due to missing, invalid, authentication info.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"dry_run\": true\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/clear",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"clear"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "Client does not have sufficient permission.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"dry_run\": true\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/clear",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"clear"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "A specified resource is not found.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"dry_run\": true\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/clear",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"clear"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "upstreamDatasetEvents",
											"item": [
												{
													"name": "Get dataset events for a DAG run",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/upstreamDatasetEvents",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id",
																"upstreamDatasetEvents"
															],
															"variable": [
																{
																	"key": "dag_id",
																	"value": "<string>"
																},
																{
																	"key": "dag_run_id",
																	"value": "<string>"
																}
															]
														},
														"description": "Get datasets for a dag run.\n\n*New in version 2.4.0*\n"
													},
													"response": [
														{
															"name": "Success.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/upstreamDatasetEvents",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"upstreamDatasetEvents"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"dataset_events\": [\n    {\n      \"dataset_id\": \"<integer>\",\n      \"dataset_uri\": \"<string>\",\n      \"extra\": {},\n      \"source_dag_id\": \"<string>\",\n      \"source_task_id\": \"<string>\",\n      \"source_run_id\": \"<string>\",\n      \"source_map_index\": \"<integer>\",\n      \"created_dagruns\": [\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"success\"\n        },\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"success\"\n        }\n      ],\n      \"timestamp\": \"<string>\"\n    },\n    {\n      \"dataset_id\": \"<integer>\",\n      \"dataset_uri\": \"<string>\",\n      \"extra\": {},\n      \"source_dag_id\": \"<string>\",\n      \"source_task_id\": \"<string>\",\n      \"source_run_id\": \"<string>\",\n      \"source_map_index\": \"<integer>\",\n      \"created_dagruns\": [\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"success\"\n        },\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"running\"\n        }\n      ],\n      \"timestamp\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
														},
														{
															"name": "Request not authenticated due to missing, invalid, authentication info.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/upstreamDatasetEvents",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"upstreamDatasetEvents"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "Client does not have sufficient permission.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/upstreamDatasetEvents",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"upstreamDatasetEvents"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "A specified resource is not found.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/upstreamDatasetEvents",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"upstreamDatasetEvents"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "setNote",
											"item": [
												{
													"name": "Update the DagRun note.",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"note\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/setNote",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id",
																"setNote"
															],
															"variable": [
																{
																	"key": "dag_id",
																	"value": "<string>"
																},
																{
																	"key": "dag_run_id",
																	"value": "<string>"
																}
															]
														},
														"description": "Update the manual user note of a DagRun.\n\n*New in version 2.5.0*\n"
													},
													"response": [
														{
															"name": "Success.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"note\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/setNote",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"setNote"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}"
														},
														{
															"name": "Client specified an invalid argument.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"note\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/setNote",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"setNote"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "Request not authenticated due to missing, invalid, authentication info.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"note\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/setNote",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"setNote"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "Client does not have sufficient permission.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"note\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/setNote",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"setNote"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "A specified resource is not found.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"note\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id/setNote",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		":dag_id",
																		"dagRuns",
																		":dag_run_id",
																		"setNote"
																	],
																	"variable": [
																		{
																			"key": "dag_id"
																		},
																		{
																			"key": "dag_run_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get a DAG run",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns",
														":dag_run_id"
													],
													"variable": [
														{
															"key": "dag_id",
															"value": "demo_api_usage"
														},
														{
															"key": "dag_run_id",
															"value": "manual__2023-08-26T16:15:44.929106+00:00"
														}
													]
												}
											},
											"response": [
												{
													"name": "Success.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}"
												},
												{
													"name": "Request not authenticated due to missing, invalid, authentication info.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Client does not have sufficient permission.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "A specified resource is not found.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Delete a DAG run",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns",
														":dag_run_id"
													],
													"variable": [
														{
															"key": "dag_id",
															"value": "<string>"
														},
														{
															"key": "dag_run_id",
															"value": "<string>"
														}
													]
												}
											},
											"response": [
												{
													"name": "Success.",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Client specified an invalid argument.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Request not authenticated due to missing, invalid, authentication info.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Client does not have sufficient permission.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "A specified resource is not found.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Modify a DAG run",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"success\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns",
														":dag_run_id"
													],
													"variable": [
														{
															"key": "dag_id",
															"value": "<string>"
														},
														{
															"key": "dag_run_id",
															"value": "<string>"
														}
													]
												},
												"description": "Modify a DAG run.\n\n*New in version 2.2.0*\n"
											},
											"response": [
												{
													"name": "Success.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"success\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}"
												},
												{
													"name": "Client specified an invalid argument.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"success\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Request not authenticated due to missing, invalid, authentication info.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"success\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Client does not have sufficient permission.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"success\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "A specified resource is not found.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"success\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/dagRuns/:dag_run_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"dagRuns",
																":dag_run_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "dag_run_id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "List DAG runs",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id/dagRuns?limit=100&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&state=<string>&state=<string>&order_by=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id",
												"dagRuns"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"description": "The numbers of items to return."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The number of items to skip before starting to collect the result set.",
													"disabled": true
												},
												{
													"key": "execution_date_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
												},
												{
													"key": "execution_date_lte",
													"value": "<dateTime>",
													"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
												},
												{
													"key": "start_date_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
												},
												{
													"key": "start_date_lte",
													"value": "<dateTime>",
													"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
												},
												{
													"key": "end_date_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
												},
												{
													"key": "end_date_lte",
													"value": "<dateTime>",
													"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
												},
												{
													"key": "updated_at_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
												},
												{
													"key": "updated_at_lte",
													"value": "<dateTime>",
													"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
												},
												{
													"key": "state",
													"value": "<string>",
													"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
												},
												{
													"key": "state",
													"value": "<string>",
													"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
												},
												{
													"key": "order_by",
													"value": "<string>",
													"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
												}
											],
											"variable": [
												{
													"key": "dag_id",
													"value": "demo_api_usage"
												}
											]
										},
										"description": "This endpoint allows specifying `~` as the dag_id to retrieve DAG runs for all DAGs.\n"
									},
									"response": [
										{
											"name": "List of DAG runs.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&state=<string>&order_by=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"query": [
														{
															"key": "limit",
															"value": "100",
															"description": "The numbers of items to return."
														},
														{
															"key": "offset",
															"value": "<integer>",
															"description": "The number of items to skip before starting to collect the result set."
														},
														{
															"key": "execution_date_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
														},
														{
															"key": "execution_date_lte",
															"value": "<dateTime>",
															"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
														},
														{
															"key": "start_date_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
														},
														{
															"key": "start_date_lte",
															"value": "<dateTime>",
															"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
														},
														{
															"key": "end_date_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
														},
														{
															"key": "end_date_lte",
															"value": "<dateTime>",
															"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
														},
														{
															"key": "updated_at_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
														},
														{
															"key": "updated_at_lte",
															"value": "<dateTime>",
															"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
														},
														{
															"key": "state",
															"value": "<string>",
															"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
														},
														{
															"key": "order_by",
															"value": "<string>",
															"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
														}
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"dag_runs\": [\n    {\n      \"dag_run_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"logical_date\": \"<dateTime>\",\n      \"execution_date\": \"<dateTime>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"data_interval_start\": \"<dateTime>\",\n      \"data_interval_end\": \"<dateTime>\",\n      \"last_scheduling_decision\": \"<dateTime>\",\n      \"run_type\": \"dataset_triggered\",\n      \"state\": \"queued\",\n      \"external_trigger\": \"<boolean>\",\n      \"conf\": {},\n      \"note\": \"<string>\"\n    },\n    {\n      \"dag_run_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"logical_date\": \"<dateTime>\",\n      \"execution_date\": \"<dateTime>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"data_interval_start\": \"<dateTime>\",\n      \"data_interval_end\": \"<dateTime>\",\n      \"last_scheduling_decision\": \"<dateTime>\",\n      \"run_type\": \"backfill\",\n      \"state\": \"queued\",\n      \"external_trigger\": \"<boolean>\",\n      \"conf\": {},\n      \"note\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
										},
										{
											"name": "Request not authenticated due to missing, invalid, authentication info.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns?limit=100&offset=<integer>&execution_date_gte=<dateTime>&execution_date_lte=<dateTime>&start_date_gte=<dateTime>&start_date_lte=<dateTime>&end_date_gte=<dateTime>&end_date_lte=<dateTime>&updated_at_gte=<dateTime>&updated_at_lte=<dateTime>&state=<string>&order_by=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"query": [
														{
															"key": "limit",
															"value": "100",
															"description": "The numbers of items to return."
														},
														{
															"key": "offset",
															"value": "<integer>",
															"description": "The number of items to skip before starting to collect the result set."
														},
														{
															"key": "execution_date_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
														},
														{
															"key": "execution_date_lte",
															"value": "<dateTime>",
															"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
														},
														{
															"key": "start_date_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
														},
														{
															"key": "start_date_lte",
															"value": "<dateTime>",
															"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
														},
														{
															"key": "end_date_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
														},
														{
															"key": "end_date_lte",
															"value": "<dateTime>",
															"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
														},
														{
															"key": "updated_at_gte",
															"value": "<dateTime>",
															"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
														},
														{
															"key": "updated_at_lte",
															"value": "<dateTime>",
															"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n"
														},
														{
															"key": "state",
															"value": "<string>",
															"description": "The value can be repeated to retrieve multiple matching values (OR condition)."
														},
														{
															"key": "order_by",
															"value": "<string>",
															"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
														}
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Trigger a new DAG run.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dag_run_id\": \"gru\",\n  \"logical_date\": \"2023-08-40T22:15:44.929106+00:00\",\n  \"execution_date\": \"2023-08-40T22:15:44.929106+00:00\",\n  \"conf\": {}\n}\n\n/*{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}*/",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id/dagRuns",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id",
												"dagRuns"
											],
											"variable": [
												{
													"key": "dag_id",
													"value": "demo_api_usage"
												}
											]
										},
										"description": "This will initiate a dagrun. If DAG is paused then dagrun state will remain queued, and the task won't run.\n"
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}"
										},
										{
											"name": "Client specified an invalid argument.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "Request not authenticated due to missing, invalid, authentication info.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "Client does not have sufficient permission.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "A specified resource is not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "An existing resource conflicts with the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dag_run_id\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"logical_date\": \"<dateTime>\",\n  \"execution_date\": \"<dateTime>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"data_interval_start\": \"<dateTime>\",\n  \"data_interval_end\": \"<dateTime>\",\n  \"last_scheduling_decision\": \"<dateTime>\",\n  \"run_type\": \"manual\",\n  \"state\": \"success\",\n  \"external_trigger\": \"<boolean>\",\n  \"conf\": {},\n  \"note\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/dagRuns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"dagRuns"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "{{baseUrl}}/dags/:dag_id/dagRuns?limit=100",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id/dagRuns?limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id",
												"dagRuns"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"description": "The numbers of items to return."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The number of items to skip before starting to collect the result set.",
													"disabled": true
												},
												{
													"key": "execution_date_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n",
													"disabled": true
												},
												{
													"key": "execution_date_lte",
													"value": "<dateTime>",
													"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n",
													"disabled": true
												},
												{
													"key": "start_date_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n",
													"disabled": true
												},
												{
													"key": "start_date_lte",
													"value": "<dateTime>",
													"description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n",
													"disabled": true
												},
												{
													"key": "end_date_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n",
													"disabled": true
												},
												{
													"key": "end_date_lte",
													"value": "<dateTime>",
													"description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n",
													"disabled": true
												},
												{
													"key": "updated_at_gte",
													"value": "<dateTime>",
													"description": "Returns objects greater or equal the specified date.\n\nThis can be combined with updated_at_lte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n",
													"disabled": true
												},
												{
													"key": "updated_at_lte",
													"value": "<dateTime>",
													"description": "Returns objects less or equal the specified date.\n\nThis can be combined with updated_at_gte parameter to receive only the selected period.\n\n*New in version 2.6.0*\n",
													"disabled": true
												},
												{
													"key": "state",
													"value": "<string>",
													"description": "The value can be repeated to retrieve multiple matching values (OR condition).",
													"disabled": true
												},
												{
													"key": "order_by",
													"value": "<string>",
													"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dag_id",
													"value": "demo_api_usage"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "updateTaskInstancesState",
							"item": [
								{
									"name": "Set a state of task instances",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dry_run\": true,\n  \"task_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": \"<boolean>\",\n  \"include_downstream\": \"<boolean>\",\n  \"include_future\": \"<boolean>\",\n  \"include_past\": \"<boolean>\",\n  \"new_state\": \"skipped\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id/updateTaskInstancesState",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id",
												"updateTaskInstancesState"
											],
											"variable": [
												{
													"key": "dag_id",
													"value": "<string>"
												}
											]
										},
										"description": "Updates the state for multiple task instances simultaneously.\n"
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": \"<boolean>\",\n  \"include_downstream\": \"<boolean>\",\n  \"include_future\": \"<boolean>\",\n  \"include_past\": \"<boolean>\",\n  \"new_state\": \"skipped\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/updateTaskInstancesState",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"updateTaskInstancesState"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"task_instances\": [\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"dag_run_id\": \"<string>\"\n    },\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"dag_run_id\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"name": "Request not authenticated due to missing, invalid, authentication info.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": \"<boolean>\",\n  \"include_downstream\": \"<boolean>\",\n  \"include_future\": \"<boolean>\",\n  \"include_past\": \"<boolean>\",\n  \"new_state\": \"skipped\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/updateTaskInstancesState",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"updateTaskInstancesState"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "Client does not have sufficient permission.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": \"<boolean>\",\n  \"include_downstream\": \"<boolean>\",\n  \"include_future\": \"<boolean>\",\n  \"include_past\": \"<boolean>\",\n  \"new_state\": \"skipped\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/updateTaskInstancesState",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"updateTaskInstancesState"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "A specified resource is not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dry_run\": true,\n  \"task_id\": \"<string>\",\n  \"execution_date\": \"<string>\",\n  \"dag_run_id\": \"<string>\",\n  \"include_upstream\": \"<boolean>\",\n  \"include_downstream\": \"<boolean>\",\n  \"include_future\": \"<boolean>\",\n  \"include_past\": \"<boolean>\",\n  \"new_state\": \"skipped\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/updateTaskInstancesState",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"updateTaskInstancesState"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "details",
							"item": [
								{
									"name": "Get a simplified representation of DAG",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id/details",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id",
												"details"
											],
											"variable": [
												{
													"key": "dag_id",
													"value": "demo_api_usage"
												}
											]
										},
										"description": "The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}.\n"
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/details",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"details"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\",\n  \"timezone\": \"<string>\",\n  \"catchup\": \"<boolean>\",\n  \"orientation\": \"<string>\",\n  \"concurrency\": \"<number>\",\n  \"start_date\": \"<dateTime>\",\n  \"dag_run_timeout\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"doc_md\": \"<string>\",\n  \"params\": {},\n  \"end_date\": \"<dateTime>\",\n  \"is_paused_upon_creation\": \"<boolean>\",\n  \"last_parsed\": \"<dateTime>\",\n  \"template_search_path\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"render_template_as_native_obj\": \"<boolean>\"\n}"
										},
										{
											"name": "Request not authenticated due to missing, invalid, authentication info.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/details",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"details"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "Client does not have sufficient permission.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/details",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"details"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "A specified resource is not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/details",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"details"
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "tasks",
							"item": [
								{
									"name": "{task_id}",
									"item": [
										{
											"name": "Get simplified representation of a task",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/tasks/:task_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"tasks",
														":task_id"
													],
													"variable": [
														{
															"key": "dag_id",
															"value": "demo_api_usage"
														},
														{
															"key": "task_id",
															"value": "long_running_task2"
														}
													]
												}
											},
											"response": [
												{
													"name": "Success.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/tasks/:task_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"tasks",
																":task_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "task_id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"class_ref\": {\n    \"module_path\": \"<string>\",\n    \"class_name\": \"<string>\"\n  },\n  \"task_id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"trigger_rule\": \"all_failed\",\n  \"extra_links\": [\n    {\n      \"class_ref\": {\n        \"module_path\": \"<string>\",\n        \"class_name\": \"<string>\"\n      }\n    },\n    {\n      \"class_ref\": {\n        \"module_path\": \"<string>\",\n        \"class_name\": \"<string>\"\n      }\n    }\n  ],\n  \"depends_on_past\": \"<boolean>\",\n  \"is_mapped\": \"<boolean>\",\n  \"wait_for_downstream\": \"<boolean>\",\n  \"retries\": \"<number>\",\n  \"queue\": \"<string>\",\n  \"pool\": \"<string>\",\n  \"pool_slots\": \"<number>\",\n  \"execution_timeout\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"retry_delay\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"retry_exponential_backoff\": \"<boolean>\",\n  \"priority_weight\": \"<number>\",\n  \"weight_rule\": \"upstream\",\n  \"ui_color\": \"#16C6D\",\n  \"ui_fgcolor\": \"#f31C4\",\n  \"template_fields\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"sub_dag\": {\n    \"dag_id\": \"<string>\",\n    \"root_dag_id\": \"<string>\",\n    \"is_paused\": \"<boolean>\",\n    \"is_active\": \"<boolean>\",\n    \"is_subdag\": \"<boolean>\",\n    \"last_parsed_time\": \"<dateTime>\",\n    \"last_pickled\": \"<dateTime>\",\n    \"last_expired\": \"<dateTime>\",\n    \"scheduler_lock\": \"<boolean>\",\n    \"pickle_id\": \"<string>\",\n    \"default_view\": \"<string>\",\n    \"fileloc\": \"<string>\",\n    \"file_token\": \"<string>\",\n    \"owners\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"description\": \"<string>\",\n    \"schedule_interval\": {\n      \"__type\": \"<string>\",\n      \"days\": \"<integer>\",\n      \"seconds\": \"<integer>\",\n      \"microseconds\": \"<integer>\"\n    },\n    \"timetable_description\": \"<string>\",\n    \"tags\": [\n      {\n        \"name\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\"\n      }\n    ],\n    \"max_active_tasks\": \"<integer>\",\n    \"max_active_runs\": \"<integer>\",\n    \"has_task_concurrency_limits\": \"<boolean>\",\n    \"has_import_errors\": \"<boolean>\",\n    \"next_dagrun\": \"<dateTime>\",\n    \"next_dagrun_data_interval_start\": \"<dateTime>\",\n    \"next_dagrun_data_interval_end\": \"<dateTime>\",\n    \"next_dagrun_create_after\": \"<dateTime>\"\n  },\n  \"downstream_task_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
												},
												{
													"name": "Request not authenticated due to missing, invalid, authentication info.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/tasks/:task_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"tasks",
																":task_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "task_id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Client does not have sufficient permission.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/tasks/:task_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"tasks",
																":task_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "task_id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "A specified resource is not found.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/dags/:dag_id/tasks/:task_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																":dag_id",
																"tasks",
																":task_id"
															],
															"variable": [
																{
																	"key": "dag_id"
																},
																{
																	"key": "task_id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get tasks for DAG",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id/tasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id",
												"tasks"
											],
											"query": [
												{
													"key": "order_by",
													"value": "<string>",
													"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dag_id",
													"value": "demo_api_usage"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/tasks?order_by=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"tasks"
													],
													"query": [
														{
															"key": "order_by",
															"value": "<string>",
															"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
														}
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"tasks\": [\n    {\n      \"class_ref\": {\n        \"module_path\": \"<string>\",\n        \"class_name\": \"<string>\"\n      },\n      \"task_id\": \"<string>\",\n      \"owner\": \"<string>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"trigger_rule\": \"all_failed\",\n      \"extra_links\": [\n        {\n          \"class_ref\": {\n            \"module_path\": \"<string>\",\n            \"class_name\": \"<string>\"\n          }\n        },\n        {\n          \"class_ref\": {\n            \"module_path\": \"<string>\",\n            \"class_name\": \"<string>\"\n          }\n        }\n      ],\n      \"depends_on_past\": \"<boolean>\",\n      \"is_mapped\": \"<boolean>\",\n      \"wait_for_downstream\": \"<boolean>\",\n      \"retries\": \"<number>\",\n      \"queue\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<number>\",\n      \"execution_timeout\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"retry_delay\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"retry_exponential_backoff\": \"<boolean>\",\n      \"priority_weight\": \"<number>\",\n      \"weight_rule\": \"downstream\",\n      \"ui_color\": \"#fc54\",\n      \"ui_fgcolor\": \"#24F\",\n      \"template_fields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"sub_dag\": {\n        \"dag_id\": \"<string>\",\n        \"root_dag_id\": \"<string>\",\n        \"is_paused\": \"<boolean>\",\n        \"is_active\": \"<boolean>\",\n        \"is_subdag\": \"<boolean>\",\n        \"last_parsed_time\": \"<dateTime>\",\n        \"last_pickled\": \"<dateTime>\",\n        \"last_expired\": \"<dateTime>\",\n        \"scheduler_lock\": \"<boolean>\",\n        \"pickle_id\": \"<string>\",\n        \"default_view\": \"<string>\",\n        \"fileloc\": \"<string>\",\n        \"file_token\": \"<string>\",\n        \"owners\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"schedule_interval\": {\n          \"__type\": \"<string>\",\n          \"days\": \"<integer>\",\n          \"seconds\": \"<integer>\",\n          \"microseconds\": \"<integer>\"\n        },\n        \"timetable_description\": \"<string>\",\n        \"tags\": [\n          {\n            \"name\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\"\n          }\n        ],\n        \"max_active_tasks\": \"<integer>\",\n        \"max_active_runs\": \"<integer>\",\n        \"has_task_concurrency_limits\": \"<boolean>\",\n        \"has_import_errors\": \"<boolean>\",\n        \"next_dagrun\": \"<dateTime>\",\n        \"next_dagrun_data_interval_start\": \"<dateTime>\",\n        \"next_dagrun_data_interval_end\": \"<dateTime>\",\n        \"next_dagrun_create_after\": \"<dateTime>\"\n      },\n      \"downstream_task_ids\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"class_ref\": {\n        \"module_path\": \"<string>\",\n        \"class_name\": \"<string>\"\n      },\n      \"task_id\": \"<string>\",\n      \"owner\": \"<string>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"trigger_rule\": \"none_failed_or_skipped\",\n      \"extra_links\": [\n        {\n          \"class_ref\": {\n            \"module_path\": \"<string>\",\n            \"class_name\": \"<string>\"\n          }\n        },\n        {\n          \"class_ref\": {\n            \"module_path\": \"<string>\",\n            \"class_name\": \"<string>\"\n          }\n        }\n      ],\n      \"depends_on_past\": \"<boolean>\",\n      \"is_mapped\": \"<boolean>\",\n      \"wait_for_downstream\": \"<boolean>\",\n      \"retries\": \"<number>\",\n      \"queue\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<number>\",\n      \"execution_timeout\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"retry_delay\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"retry_exponential_backoff\": \"<boolean>\",\n      \"priority_weight\": \"<number>\",\n      \"weight_rule\": \"downstream\",\n      \"ui_color\": \"#D0EcE\",\n      \"ui_fgcolor\": \"#f3F677\",\n      \"template_fields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"sub_dag\": {\n        \"dag_id\": \"<string>\",\n        \"root_dag_id\": \"<string>\",\n        \"is_paused\": \"<boolean>\",\n        \"is_active\": \"<boolean>\",\n        \"is_subdag\": \"<boolean>\",\n        \"last_parsed_time\": \"<dateTime>\",\n        \"last_pickled\": \"<dateTime>\",\n        \"last_expired\": \"<dateTime>\",\n        \"scheduler_lock\": \"<boolean>\",\n        \"pickle_id\": \"<string>\",\n        \"default_view\": \"<string>\",\n        \"fileloc\": \"<string>\",\n        \"file_token\": \"<string>\",\n        \"owners\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"schedule_interval\": {\n          \"__type\": \"<string>\",\n          \"days\": \"<integer>\",\n          \"seconds\": \"<integer>\",\n          \"microseconds\": \"<integer>\"\n        },\n        \"timetable_description\": \"<string>\",\n        \"tags\": [\n          {\n            \"name\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\"\n          }\n        ],\n        \"max_active_tasks\": \"<integer>\",\n        \"max_active_runs\": \"<integer>\",\n        \"has_task_concurrency_limits\": \"<boolean>\",\n        \"has_import_errors\": \"<boolean>\",\n        \"next_dagrun\": \"<dateTime>\",\n        \"next_dagrun_data_interval_start\": \"<dateTime>\",\n        \"next_dagrun_data_interval_end\": \"<dateTime>\",\n        \"next_dagrun_create_after\": \"<dateTime>\"\n      },\n      \"downstream_task_ids\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}"
										},
										{
											"name": "Request not authenticated due to missing, invalid, authentication info.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/tasks?order_by=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"tasks"
													],
													"query": [
														{
															"key": "order_by",
															"value": "<string>",
															"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
														}
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "Client does not have sufficient permission.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/tasks?order_by=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"tasks"
													],
													"query": [
														{
															"key": "order_by",
															"value": "<string>",
															"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
														}
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										},
										{
											"name": "A specified resource is not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/dags/:dag_id/tasks?order_by=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														":dag_id",
														"tasks"
													],
													"query": [
														{
															"key": "order_by",
															"value": "<string>",
															"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
														}
													],
													"variable": [
														{
															"key": "dag_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get basic information about a DAG",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dags/:dag_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags",
										":dag_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "demo_api_usage"
										}
									]
								},
								"description": "Presents only information available in database (DAGModel).\nIf you need detailed information, consider using GET /dags/{dag_id}/details.\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update a DAG",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dags/:dag_id?update_mask=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags",
										":dag_id"
									],
									"query": [
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete a DAG",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dags/:dag_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags",
										":dag_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>"
										}
									]
								},
								"description": "Deletes all metadata related to the DAG, including finished DAG Runs and Tasks.\nLogs are not deleted. This action cannot be undone.\n\n*New in version 2.2.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "An existing resource conflicts with the request.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dags/:dag_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dags",
												":dag_id"
											],
											"variable": [
												{
													"key": "dag_id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "~",
					"item": [
						{
							"name": "dagRuns",
							"item": [
								{
									"name": "list",
									"item": [
										{
											"name": "List DAG runs (batch)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order_by\": \"<string>\",\n  \"page_offset\": \"<integer>\",\n  \"page_limit\": 100,\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"states\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/dags/~/dagRuns/list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"dags",
														"~",
														"dagRuns",
														"list"
													]
												},
												"description": "This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limit.\n"
											},
											"response": [
												{
													"name": "Success.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"order_by\": \"<string>\",\n  \"page_offset\": \"<integer>\",\n  \"page_limit\": 100,\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"states\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/~/dagRuns/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																"~",
																"dagRuns",
																"list"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"dag_runs\": [\n    {\n      \"dag_run_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"logical_date\": \"<dateTime>\",\n      \"execution_date\": \"<dateTime>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"data_interval_start\": \"<dateTime>\",\n      \"data_interval_end\": \"<dateTime>\",\n      \"last_scheduling_decision\": \"<dateTime>\",\n      \"run_type\": \"dataset_triggered\",\n      \"state\": \"queued\",\n      \"external_trigger\": \"<boolean>\",\n      \"conf\": {},\n      \"note\": \"<string>\"\n    },\n    {\n      \"dag_run_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"logical_date\": \"<dateTime>\",\n      \"execution_date\": \"<dateTime>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"data_interval_start\": \"<dateTime>\",\n      \"data_interval_end\": \"<dateTime>\",\n      \"last_scheduling_decision\": \"<dateTime>\",\n      \"run_type\": \"backfill\",\n      \"state\": \"queued\",\n      \"external_trigger\": \"<boolean>\",\n      \"conf\": {},\n      \"note\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
												},
												{
													"name": "Client specified an invalid argument.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"order_by\": \"<string>\",\n  \"page_offset\": \"<integer>\",\n  \"page_limit\": 100,\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"states\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/~/dagRuns/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																"~",
																"dagRuns",
																"list"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Request not authenticated due to missing, invalid, authentication info.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"order_by\": \"<string>\",\n  \"page_offset\": \"<integer>\",\n  \"page_limit\": 100,\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"states\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/~/dagRuns/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																"~",
																"dagRuns",
																"list"
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												},
												{
													"name": "Client does not have sufficient permission.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"order_by\": \"<string>\",\n  \"page_offset\": \"<integer>\",\n  \"page_limit\": 100,\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"states\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/dags/~/dagRuns/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"dags",
																"~",
																"dagRuns",
																"list"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "~",
									"item": [
										{
											"name": "taskInstances",
											"item": [
												{
													"name": "list",
													"item": [
														{
															"name": "List task instances (batch)",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"dag_run_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"task_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\",\n  \"duration_gte\": \"<number>\",\n  \"duration_lte\": \"<number>\",\n  \"state\": [\n    null,\n    \"success\"\n  ],\n  \"pool\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"queue\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/dags/~/dagRuns/~/taskInstances/list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"dags",
																		"~",
																		"dagRuns",
																		"~",
																		"taskInstances",
																		"list"
																	]
																},
																"description": "List task instances from all DAGs and DAG runs.\nThis endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limits.\n"
															},
															"response": [
																{
																	"name": "Success.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"dag_run_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"task_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\",\n  \"duration_gte\": \"<number>\",\n  \"duration_lte\": \"<number>\",\n  \"state\": [\n    null,\n    \"success\"\n  ],\n  \"pool\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"queue\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/~/dagRuns/~/taskInstances/list",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				"~",
																				"dagRuns",
																				"~",
																				"taskInstances",
																				"list"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"task_instances\": [\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"dag_run_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"start_date\": \"<string>\",\n      \"end_date\": \"<string>\",\n      \"duration\": \"<number>\",\n      \"state\": null,\n      \"try_number\": \"<integer>\",\n      \"map_index\": \"<integer>\",\n      \"max_tries\": \"<integer>\",\n      \"hostname\": \"<string>\",\n      \"unixname\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<integer>\",\n      \"queue\": \"<string>\",\n      \"priority_weight\": \"<integer>\",\n      \"operator\": \"<string>\",\n      \"queued_when\": \"<string>\",\n      \"pid\": \"<integer>\",\n      \"executor_config\": \"<string>\",\n      \"sla_miss\": {\n        \"task_id\": \"<string>\",\n        \"dag_id\": \"<string>\",\n        \"execution_date\": \"<string>\",\n        \"email_sent\": \"<boolean>\",\n        \"timestamp\": \"<string>\",\n        \"description\": \"<string>\",\n        \"notification_sent\": \"<boolean>\"\n      },\n      \"rendered_fields\": {},\n      \"trigger\": {\n        \"id\": \"<integer>\",\n        \"classpath\": \"<string>\",\n        \"kwargs\": \"<string>\",\n        \"created_date\": \"<string>\",\n        \"triggerer_id\": \"<integer>\"\n      },\n      \"triggerer_job\": {\n        \"id\": \"<integer>\",\n        \"dag_id\": \"<string>\",\n        \"state\": \"<string>\",\n        \"job_type\": \"<string>\",\n        \"start_date\": \"<string>\",\n        \"end_date\": \"<string>\",\n        \"latest_heartbeat\": \"<string>\",\n        \"executor_class\": \"<string>\",\n        \"hostname\": \"<string>\",\n        \"unixname\": \"<string>\"\n      },\n      \"note\": \"<string>\"\n    },\n    {\n      \"task_id\": \"<string>\",\n      \"dag_id\": \"<string>\",\n      \"dag_run_id\": \"<string>\",\n      \"execution_date\": \"<string>\",\n      \"start_date\": \"<string>\",\n      \"end_date\": \"<string>\",\n      \"duration\": \"<number>\",\n      \"state\": \"removed\",\n      \"try_number\": \"<integer>\",\n      \"map_index\": \"<integer>\",\n      \"max_tries\": \"<integer>\",\n      \"hostname\": \"<string>\",\n      \"unixname\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<integer>\",\n      \"queue\": \"<string>\",\n      \"priority_weight\": \"<integer>\",\n      \"operator\": \"<string>\",\n      \"queued_when\": \"<string>\",\n      \"pid\": \"<integer>\",\n      \"executor_config\": \"<string>\",\n      \"sla_miss\": {\n        \"task_id\": \"<string>\",\n        \"dag_id\": \"<string>\",\n        \"execution_date\": \"<string>\",\n        \"email_sent\": \"<boolean>\",\n        \"timestamp\": \"<string>\",\n        \"description\": \"<string>\",\n        \"notification_sent\": \"<boolean>\"\n      },\n      \"rendered_fields\": {},\n      \"trigger\": {\n        \"id\": \"<integer>\",\n        \"classpath\": \"<string>\",\n        \"kwargs\": \"<string>\",\n        \"created_date\": \"<string>\",\n        \"triggerer_id\": \"<integer>\"\n      },\n      \"triggerer_job\": {\n        \"id\": \"<integer>\",\n        \"dag_id\": \"<string>\",\n        \"state\": \"<string>\",\n        \"job_type\": \"<string>\",\n        \"start_date\": \"<string>\",\n        \"end_date\": \"<string>\",\n        \"latest_heartbeat\": \"<string>\",\n        \"executor_class\": \"<string>\",\n        \"hostname\": \"<string>\",\n        \"unixname\": \"<string>\"\n      },\n      \"note\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
																},
																{
																	"name": "Request not authenticated due to missing, invalid, authentication info.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"dag_run_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"task_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\",\n  \"duration_gte\": \"<number>\",\n  \"duration_lte\": \"<number>\",\n  \"state\": [\n    null,\n    \"success\"\n  ],\n  \"pool\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"queue\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/~/dagRuns/~/taskInstances/list",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				"~",
																				"dagRuns",
																				"~",
																				"taskInstances",
																				"list"
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																},
																{
																	"name": "Client does not have sufficient permission.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"dag_run_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"task_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\",\n  \"duration_gte\": \"<number>\",\n  \"duration_lte\": \"<number>\",\n  \"state\": [\n    null,\n    \"success\"\n  ],\n  \"pool\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"queue\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/~/dagRuns/~/taskInstances/list",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				"~",
																				"dagRuns",
																				"~",
																				"taskInstances",
																				"list"
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																},
																{
																	"name": "A specified resource is not found.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"dag_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"dag_run_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"task_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"execution_date_gte\": \"<dateTime>\",\n  \"execution_date_lte\": \"<dateTime>\",\n  \"start_date_gte\": \"<dateTime>\",\n  \"start_date_lte\": \"<dateTime>\",\n  \"end_date_gte\": \"<dateTime>\",\n  \"end_date_lte\": \"<dateTime>\",\n  \"duration_gte\": \"<number>\",\n  \"duration_lte\": \"<number>\",\n  \"state\": [\n    null,\n    \"success\"\n  ],\n  \"pool\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"queue\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/dags/~/dagRuns/~/taskInstances/list",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"dags",
																				"~",
																				"dagRuns",
																				"~",
																				"taskInstances",
																				"list"
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "List DAGs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dags?limit=100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set.",
									"disabled": true
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "<string>",
									"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "<string>",
									"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n",
									"disabled": true
								},
								{
									"key": "only_active",
									"value": "true",
									"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n",
									"disabled": true
								},
								{
									"key": "paused",
									"value": "<boolean>",
									"description": "Only filter paused/unpaused DAGs. If absent or null, it returns paused and unpaused DAGs.\n\n*New in version 2.6.0*\n",
									"disabled": true
								},
								{
									"key": "dag_id_pattern",
									"value": "<string>",
									"description": "If set, only return DAGs with dag_ids matching this pattern.\n",
									"disabled": true
								}
							]
						},
						"description": "List DAGs in the database.\n`dag_id_pattern` can be set to match dags of a specific pattern\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dags?limit=100&offset=<integer>&order_by=<string>&tags=<string>&only_active=true&paused=<boolean>&dag_id_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
										},
										{
											"key": "only_active",
											"value": "true",
											"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
										},
										{
											"key": "paused",
											"value": "<boolean>",
											"description": "Only filter paused/unpaused DAGs. If absent or null, it returns paused and unpaused DAGs.\n\n*New in version 2.6.0*\n"
										},
										{
											"key": "dag_id_pattern",
											"value": "<string>",
											"description": "If set, only return DAGs with dag_ids matching this pattern.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dags\": [\n    {\n      \"dag_id\": \"<string>\",\n      \"root_dag_id\": \"<string>\",\n      \"is_paused\": \"<boolean>\",\n      \"is_active\": \"<boolean>\",\n      \"is_subdag\": \"<boolean>\",\n      \"last_parsed_time\": \"<dateTime>\",\n      \"last_pickled\": \"<dateTime>\",\n      \"last_expired\": \"<dateTime>\",\n      \"scheduler_lock\": \"<boolean>\",\n      \"pickle_id\": \"<string>\",\n      \"default_view\": \"<string>\",\n      \"fileloc\": \"<string>\",\n      \"file_token\": \"<string>\",\n      \"owners\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"description\": \"<string>\",\n      \"schedule_interval\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"timetable_description\": \"<string>\",\n      \"tags\": [\n        {\n          \"name\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\"\n        }\n      ],\n      \"max_active_tasks\": \"<integer>\",\n      \"max_active_runs\": \"<integer>\",\n      \"has_task_concurrency_limits\": \"<boolean>\",\n      \"has_import_errors\": \"<boolean>\",\n      \"next_dagrun\": \"<dateTime>\",\n      \"next_dagrun_data_interval_start\": \"<dateTime>\",\n      \"next_dagrun_data_interval_end\": \"<dateTime>\",\n      \"next_dagrun_create_after\": \"<dateTime>\"\n    },\n    {\n      \"dag_id\": \"<string>\",\n      \"root_dag_id\": \"<string>\",\n      \"is_paused\": \"<boolean>\",\n      \"is_active\": \"<boolean>\",\n      \"is_subdag\": \"<boolean>\",\n      \"last_parsed_time\": \"<dateTime>\",\n      \"last_pickled\": \"<dateTime>\",\n      \"last_expired\": \"<dateTime>\",\n      \"scheduler_lock\": \"<boolean>\",\n      \"pickle_id\": \"<string>\",\n      \"default_view\": \"<string>\",\n      \"fileloc\": \"<string>\",\n      \"file_token\": \"<string>\",\n      \"owners\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"description\": \"<string>\",\n      \"schedule_interval\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"timetable_description\": \"<string>\",\n      \"tags\": [\n        {\n          \"name\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\"\n        }\n      ],\n      \"max_active_tasks\": \"<integer>\",\n      \"max_active_runs\": \"<integer>\",\n      \"has_task_concurrency_limits\": \"<boolean>\",\n      \"has_import_errors\": \"<boolean>\",\n      \"next_dagrun\": \"<dateTime>\",\n      \"next_dagrun_data_interval_start\": \"<dateTime>\",\n      \"next_dagrun_data_interval_end\": \"<dateTime>\",\n      \"next_dagrun_create_after\": \"<dateTime>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dags?limit=100&offset=<integer>&order_by=<string>&tags=<string>&only_active=true&paused=<boolean>&dag_id_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
										},
										{
											"key": "only_active",
											"value": "true",
											"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
										},
										{
											"key": "paused",
											"value": "<boolean>",
											"description": "Only filter paused/unpaused DAGs. If absent or null, it returns paused and unpaused DAGs.\n\n*New in version 2.6.0*\n"
										},
										{
											"key": "dag_id_pattern",
											"value": "<string>",
											"description": "If set, only return DAGs with dag_ids matching this pattern.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update DAGs",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dags?limit=100&offset=<integer>&tags=<string>&tags=<string>&update_mask=<string>,<string>&only_active=true&dag_id_pattern=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "tags",
									"value": "<string>",
									"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
								},
								{
									"key": "tags",
									"value": "<string>",
									"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
								},
								{
									"key": "update_mask",
									"value": "<string>,<string>",
									"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
								},
								{
									"key": "only_active",
									"value": "true",
									"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
								},
								{
									"key": "dag_id_pattern",
									"value": "<string>",
									"description": "(Required) If set, only update DAGs with dag_ids matching this pattern.\n"
								}
							]
						},
						"description": "Update DAGs of a given dag_id_pattern using UpdateMask.\nThis endpoint allows specifying `~` as the dag_id_pattern to update all DAGs.\n*New in version 2.3.0*\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dags?limit=100&offset=<integer>&tags=<string>&update_mask=<string>,<string>&only_active=true&dag_id_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
										},
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										},
										{
											"key": "only_active",
											"value": "true",
											"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
										},
										{
											"key": "dag_id_pattern",
											"value": "<string>",
											"description": "(Required) If set, only update DAGs with dag_ids matching this pattern.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dags\": [\n    {\n      \"dag_id\": \"<string>\",\n      \"root_dag_id\": \"<string>\",\n      \"is_paused\": \"<boolean>\",\n      \"is_active\": \"<boolean>\",\n      \"is_subdag\": \"<boolean>\",\n      \"last_parsed_time\": \"<dateTime>\",\n      \"last_pickled\": \"<dateTime>\",\n      \"last_expired\": \"<dateTime>\",\n      \"scheduler_lock\": \"<boolean>\",\n      \"pickle_id\": \"<string>\",\n      \"default_view\": \"<string>\",\n      \"fileloc\": \"<string>\",\n      \"file_token\": \"<string>\",\n      \"owners\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"description\": \"<string>\",\n      \"schedule_interval\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"timetable_description\": \"<string>\",\n      \"tags\": [\n        {\n          \"name\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\"\n        }\n      ],\n      \"max_active_tasks\": \"<integer>\",\n      \"max_active_runs\": \"<integer>\",\n      \"has_task_concurrency_limits\": \"<boolean>\",\n      \"has_import_errors\": \"<boolean>\",\n      \"next_dagrun\": \"<dateTime>\",\n      \"next_dagrun_data_interval_start\": \"<dateTime>\",\n      \"next_dagrun_data_interval_end\": \"<dateTime>\",\n      \"next_dagrun_create_after\": \"<dateTime>\"\n    },\n    {\n      \"dag_id\": \"<string>\",\n      \"root_dag_id\": \"<string>\",\n      \"is_paused\": \"<boolean>\",\n      \"is_active\": \"<boolean>\",\n      \"is_subdag\": \"<boolean>\",\n      \"last_parsed_time\": \"<dateTime>\",\n      \"last_pickled\": \"<dateTime>\",\n      \"last_expired\": \"<dateTime>\",\n      \"scheduler_lock\": \"<boolean>\",\n      \"pickle_id\": \"<string>\",\n      \"default_view\": \"<string>\",\n      \"fileloc\": \"<string>\",\n      \"file_token\": \"<string>\",\n      \"owners\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"description\": \"<string>\",\n      \"schedule_interval\": {\n        \"__type\": \"<string>\",\n        \"days\": \"<integer>\",\n        \"seconds\": \"<integer>\",\n        \"microseconds\": \"<integer>\"\n      },\n      \"timetable_description\": \"<string>\",\n      \"tags\": [\n        {\n          \"name\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\"\n        }\n      ],\n      \"max_active_tasks\": \"<integer>\",\n      \"max_active_runs\": \"<integer>\",\n      \"has_task_concurrency_limits\": \"<boolean>\",\n      \"has_import_errors\": \"<boolean>\",\n      \"next_dagrun\": \"<dateTime>\",\n      \"next_dagrun_data_interval_start\": \"<dateTime>\",\n      \"next_dagrun_data_interval_end\": \"<dateTime>\",\n      \"next_dagrun_create_after\": \"<dateTime>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dags?limit=100&offset=<integer>&tags=<string>&update_mask=<string>,<string>&only_active=true&dag_id_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
										},
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										},
										{
											"key": "only_active",
											"value": "true",
											"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
										},
										{
											"key": "dag_id_pattern",
											"value": "<string>",
											"description": "(Required) If set, only update DAGs with dag_ids matching this pattern.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dags?limit=100&offset=<integer>&tags=<string>&update_mask=<string>,<string>&only_active=true&dag_id_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
										},
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										},
										{
											"key": "only_active",
											"value": "true",
											"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
										},
										{
											"key": "dag_id_pattern",
											"value": "<string>",
											"description": "(Required) If set, only update DAGs with dag_ids matching this pattern.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "A specified resource is not found.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"root_dag_id\": \"<string>\",\n  \"is_paused\": \"<boolean>\",\n  \"is_active\": \"<boolean>\",\n  \"is_subdag\": \"<boolean>\",\n  \"last_parsed_time\": \"<dateTime>\",\n  \"last_pickled\": \"<dateTime>\",\n  \"last_expired\": \"<dateTime>\",\n  \"scheduler_lock\": \"<boolean>\",\n  \"pickle_id\": \"<string>\",\n  \"default_view\": \"<string>\",\n  \"fileloc\": \"<string>\",\n  \"file_token\": \"<string>\",\n  \"owners\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"description\": \"<string>\",\n  \"schedule_interval\": {\n    \"__type\": \"<string>\",\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\"\n  },\n  \"timetable_description\": \"<string>\",\n  \"tags\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"max_active_tasks\": \"<integer>\",\n  \"max_active_runs\": \"<integer>\",\n  \"has_task_concurrency_limits\": \"<boolean>\",\n  \"has_import_errors\": \"<boolean>\",\n  \"next_dagrun\": \"<dateTime>\",\n  \"next_dagrun_data_interval_start\": \"<dateTime>\",\n  \"next_dagrun_data_interval_end\": \"<dateTime>\",\n  \"next_dagrun_create_after\": \"<dateTime>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dags?limit=100&offset=<integer>&tags=<string>&update_mask=<string>,<string>&only_active=true&dag_id_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dags"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
										},
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										},
										{
											"key": "only_active",
											"value": "true",
											"description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
										},
										{
											"key": "dag_id_pattern",
											"value": "<string>",
											"description": "(Required) If set, only update DAGs with dag_ids matching this pattern.\n"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "eventLogs",
			"item": [
				{
					"name": "{event_log_id}",
					"item": [
						{
							"name": "Get a log entry",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/eventLogs/:event_log_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"eventLogs",
										":event_log_id"
									],
									"variable": [
										{
											"key": "event_log_id",
											"value": "<integer>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/eventLogs/:event_log_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"eventLogs",
												":event_log_id"
											],
											"variable": [
												{
													"key": "event_log_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"event_log_id\": \"<integer>\",\n  \"when\": \"<dateTime>\",\n  \"dag_id\": \"<string>\",\n  \"task_id\": \"<string>\",\n  \"event\": \"<string>\",\n  \"execution_date\": \"<dateTime>\",\n  \"owner\": \"<string>\",\n  \"extra\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/eventLogs/:event_log_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"eventLogs",
												":event_log_id"
											],
											"variable": [
												{
													"key": "event_log_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/eventLogs/:event_log_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"eventLogs",
												":event_log_id"
											],
											"variable": [
												{
													"key": "event_log_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/eventLogs/:event_log_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"eventLogs",
												":event_log_id"
											],
											"variable": [
												{
													"key": "event_log_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List log entries",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/eventLogs?limit=100&offset=<integer>&order_by=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"eventLogs"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								}
							]
						},
						"description": "List log entries from event log."
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/eventLogs?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"eventLogs"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"event_logs\": [\n    {\n      \"event_log_id\": \"<integer>\",\n      \"when\": \"<dateTime>\",\n      \"dag_id\": \"<string>\",\n      \"task_id\": \"<string>\",\n      \"event\": \"<string>\",\n      \"execution_date\": \"<dateTime>\",\n      \"owner\": \"<string>\",\n      \"extra\": \"<string>\"\n    },\n    {\n      \"event_log_id\": \"<integer>\",\n      \"when\": \"<dateTime>\",\n      \"dag_id\": \"<string>\",\n      \"task_id\": \"<string>\",\n      \"event\": \"<string>\",\n      \"execution_date\": \"<dateTime>\",\n      \"owner\": \"<string>\",\n      \"extra\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/eventLogs?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"eventLogs"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/eventLogs?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"eventLogs"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "importErrors",
			"item": [
				{
					"name": "{import_error_id}",
					"item": [
						{
							"name": "Get an import error",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/importErrors/:import_error_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"importErrors",
										":import_error_id"
									],
									"variable": [
										{
											"key": "import_error_id",
											"value": "<integer>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/importErrors/:import_error_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"importErrors",
												":import_error_id"
											],
											"variable": [
												{
													"key": "import_error_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"import_error_id\": \"<integer>\",\n  \"timestamp\": \"<string>\",\n  \"filename\": \"<string>\",\n  \"stack_trace\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/importErrors/:import_error_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"importErrors",
												":import_error_id"
											],
											"variable": [
												{
													"key": "import_error_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/importErrors/:import_error_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"importErrors",
												":import_error_id"
											],
											"variable": [
												{
													"key": "import_error_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/importErrors/:import_error_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"importErrors",
												":import_error_id"
											],
											"variable": [
												{
													"key": "import_error_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List import errors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/importErrors?limit=100&offset=<integer>&order_by=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"importErrors"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/importErrors?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"importErrors"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"import_errors\": [\n    {\n      \"import_error_id\": \"<integer>\",\n      \"timestamp\": \"<string>\",\n      \"filename\": \"<string>\",\n      \"stack_trace\": \"<string>\"\n    },\n    {\n      \"import_error_id\": \"<integer>\",\n      \"timestamp\": \"<string>\",\n      \"filename\": \"<string>\",\n      \"stack_trace\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/importErrors?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"importErrors"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/importErrors?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"importErrors"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "pools",
			"item": [
				{
					"name": "{pool_name}",
					"item": [
						{
							"name": "Get a pool",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools/:pool_name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools",
										":pool_name"
									],
									"variable": [
										{
											"key": "pool_name",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update a pool",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pools/:pool_name?update_mask=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools",
										":pool_name"
									],
									"query": [
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										}
									],
									"variable": [
										{
											"key": "pool_name",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}"
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "An existing resource conflicts with the request.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete a pool",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools/:pool_name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools",
										":pool_name"
									],
									"variable": [
										{
											"key": "pool_name",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:pool_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":pool_name"
											],
											"variable": [
												{
													"key": "pool_name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List pools",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pools?limit=100&offset=<integer>&order_by=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pools"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "List of pools.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"pools\": [\n    {\n      \"name\": \"<string>\",\n      \"slots\": \"<integer>\",\n      \"occupied_slots\": \"<integer>\",\n      \"running_slots\": \"<integer>\",\n      \"queued_slots\": \"<integer>\",\n      \"open_slots\": \"<integer>\",\n      \"scheduled_slots\": \"<integer>\",\n      \"deferred_slots\": \"<integer>\",\n      \"description\": \"<string>\",\n      \"include_deferred\": \"<boolean>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"slots\": \"<integer>\",\n      \"occupied_slots\": \"<integer>\",\n      \"running_slots\": \"<integer>\",\n      \"queued_slots\": \"<integer>\",\n      \"open_slots\": \"<integer>\",\n      \"scheduled_slots\": \"<integer>\",\n      \"deferred_slots\": \"<integer>\",\n      \"description\": \"<string>\",\n      \"include_deferred\": \"<boolean>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a pool",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pools",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pools"
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pools",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}"
						},
						{
							"name": "Client specified an invalid argument.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pools",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pools",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"slots\": \"<integer>\",\n  \"occupied_slots\": \"<integer>\",\n  \"running_slots\": \"<integer>\",\n  \"queued_slots\": \"<integer>\",\n  \"open_slots\": \"<integer>\",\n  \"scheduled_slots\": \"<integer>\",\n  \"deferred_slots\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"include_deferred\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pools",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "providers",
			"item": [
				{
					"name": "List providers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"providers"
							]
						},
						"description": "Get a list of providers.\n\n*New in version 2.1.0*\n"
					},
					"response": [
						{
							"name": "List of providers.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"providers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"providers\": [\n    {\n      \"package_name\": \"<string>\",\n      \"description\": \"<string>\",\n      \"version\": \"<string>\"\n    },\n    {\n      \"package_name\": \"<string>\",\n      \"description\": \"<string>\",\n      \"version\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"providers"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/providers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"providers"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "variables",
			"item": [
				{
					"name": "{variable_key}",
					"item": [
						{
							"name": "Get a variable",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/variables/:variable_key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables",
										":variable_key"
									],
									"variable": [
										{
											"key": "variable_key",
											"value": "lala"
										}
									]
								},
								"description": "Get a variable by key."
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update a variable",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/variables/:variable_key?update_mask=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables",
										":variable_key"
									],
									"query": [
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										}
									],
									"variable": [
										{
											"key": "variable_key",
											"value": "<string>"
										}
									]
								},
								"description": "Update a variable by key."
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}"
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete a variable",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/variables/:variable_key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables",
										":variable_key"
									],
									"variable": [
										{
											"key": "variable_key",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/variables/:variable_key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"variables",
												":variable_key"
											],
											"variable": [
												{
													"key": "variable_key"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List variables",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/variables?limit=100&offset=<integer>&order_by=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"variables"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								}
							]
						},
						"description": "The collection does not contain data. To get data, you must get a single entity."
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/variables?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"variables\": [\n    {\n      \"key\": \"<string>\",\n      \"description\": \"<string>\"\n    },\n    {\n      \"key\": \"<string>\",\n      \"description\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/variables?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/variables?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a variable",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "/*{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}*/\n\n{\n  \"key\": \"lala\",\n  \"description\": \"lala\",\n  \"value\": \"9999\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/variables",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"variables"
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/variables",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}"
						},
						{
							"name": "Client specified an invalid argument.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/variables",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/variables",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"<string>\",\n  \"description\": \"<string>\",\n  \"value\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/variables",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"variables"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "dagSources",
			"item": [
				{
					"name": "{file_token}",
					"item": [
						{
							"name": "Get a source code",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dagSources/:file_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dagSources",
										":file_token"
									],
									"variable": [
										{
											"key": "file_token",
											"value": "<string>"
										}
									]
								},
								"description": "Get a source code using file token.\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dagSources/:file_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dagSources",
												":file_token"
											],
											"variable": [
												{
													"key": "file_token"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"content\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dagSources/:file_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dagSources",
												":file_token"
											],
											"variable": [
												{
													"key": "file_token"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dagSources/:file_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dagSources",
												":file_token"
											],
											"variable": [
												{
													"key": "file_token"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dagSources/:file_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dagSources",
												":file_token"
											],
											"variable": [
												{
													"key": "file_token"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified Accept header is not allowed.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dagSources/:file_token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dagSources",
												":file_token"
											],
											"variable": [
												{
													"key": "file_token"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "dagWarnings",
			"item": [
				{
					"name": "List dag warnings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dagWarnings?dag_id=<string>&warning_type=<string>&limit=100&offset=<integer>&order_by=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dagWarnings"
							],
							"query": [
								{
									"key": "dag_id",
									"value": "<string>",
									"description": "If set, only return DAG warnings with this dag_id."
								},
								{
									"key": "warning_type",
									"value": "<string>",
									"description": "If set, only return DAG warnings with this type."
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dagWarnings?dag_id=<string>&warning_type=<string>&limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dagWarnings"
									],
									"query": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "If set, only return DAG warnings with this dag_id."
										},
										{
											"key": "warning_type",
											"value": "<string>",
											"description": "If set, only return DAG warnings with this type."
										},
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"import_errors\": [\n    {\n      \"dag_id\": \"<string>\",\n      \"warning_type\": \"<string>\",\n      \"message\": \"<string>\",\n      \"timestamp\": \"<string>\"\n    },\n    {\n      \"dag_id\": \"<string>\",\n      \"warning_type\": \"<string>\",\n      \"message\": \"<string>\",\n      \"timestamp\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dagWarnings?dag_id=<string>&warning_type=<string>&limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dagWarnings"
									],
									"query": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "If set, only return DAG warnings with this dag_id."
										},
										{
											"key": "warning_type",
											"value": "<string>",
											"description": "If set, only return DAG warnings with this type."
										},
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dagWarnings?dag_id=<string>&warning_type=<string>&limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dagWarnings"
									],
									"query": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "If set, only return DAG warnings with this dag_id."
										},
										{
											"key": "warning_type",
											"value": "<string>",
											"description": "If set, only return DAG warnings with this type."
										},
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "datasets",
			"item": [
				{
					"name": "{uri}",
					"item": [
						{
							"name": "Get a dataset",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/datasets/:uri",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"datasets",
										":uri"
									],
									"variable": [
										{
											"key": "uri",
											"value": "<string>"
										}
									]
								},
								"description": "Get a dataset by uri."
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/:uri",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												":uri"
											],
											"variable": [
												{
													"key": "uri"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"uri\": \"<string>\",\n  \"extra\": {},\n  \"created_at\": \"<string>\",\n  \"updated_at\": \"<string>\",\n  \"consuming_dags\": [\n    {\n      \"dag_id\": \"<string>\",\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\"\n    },\n    {\n      \"dag_id\": \"<string>\",\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\"\n    }\n  ],\n  \"producing_tasks\": [\n    {\n      \"dag_id\": \"<string>\",\n      \"task_id\": \"<string>\",\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\"\n    },\n    {\n      \"dag_id\": \"<string>\",\n      \"task_id\": \"<string>\",\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/:uri",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												":uri"
											],
											"variable": [
												{
													"key": "uri"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/:uri",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												":uri"
											],
											"variable": [
												{
													"key": "uri"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/:uri",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												":uri"
											],
											"variable": [
												{
													"key": "uri"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "events",
					"item": [
						{
							"name": "Get dataset events",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/datasets/events?limit=100&offset=<integer>&order_by=<string>&dataset_id=<integer>&source_dag_id=<string>&source_task_id=<string>&source_run_id=<string>&source_map_index=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"datasets",
										"events"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										},
										{
											"key": "dataset_id",
											"value": "<integer>",
											"description": "The Dataset ID that updated the dataset."
										},
										{
											"key": "source_dag_id",
											"value": "<string>",
											"description": "The DAG ID that updated the dataset."
										},
										{
											"key": "source_task_id",
											"value": "<string>",
											"description": "The task ID that updated the dataset."
										},
										{
											"key": "source_run_id",
											"value": "<string>",
											"description": "The DAG run ID that updated the dataset."
										},
										{
											"key": "source_map_index",
											"value": "<integer>",
											"description": "The map index that updated the dataset."
										}
									]
								},
								"description": "Get dataset events"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/events?limit=100&offset=<integer>&order_by=<string>&dataset_id=<integer>&source_dag_id=<string>&source_task_id=<string>&source_run_id=<string>&source_map_index=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												"events"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"description": "The numbers of items to return."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The number of items to skip before starting to collect the result set."
												},
												{
													"key": "order_by",
													"value": "<string>",
													"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
												},
												{
													"key": "dataset_id",
													"value": "<integer>",
													"description": "The Dataset ID that updated the dataset."
												},
												{
													"key": "source_dag_id",
													"value": "<string>",
													"description": "The DAG ID that updated the dataset."
												},
												{
													"key": "source_task_id",
													"value": "<string>",
													"description": "The task ID that updated the dataset."
												},
												{
													"key": "source_run_id",
													"value": "<string>",
													"description": "The DAG run ID that updated the dataset."
												},
												{
													"key": "source_map_index",
													"value": "<integer>",
													"description": "The map index that updated the dataset."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"dataset_events\": [\n    {\n      \"dataset_id\": \"<integer>\",\n      \"dataset_uri\": \"<string>\",\n      \"extra\": {},\n      \"source_dag_id\": \"<string>\",\n      \"source_task_id\": \"<string>\",\n      \"source_run_id\": \"<string>\",\n      \"source_map_index\": \"<integer>\",\n      \"created_dagruns\": [\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"success\"\n        },\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"success\"\n        }\n      ],\n      \"timestamp\": \"<string>\"\n    },\n    {\n      \"dataset_id\": \"<integer>\",\n      \"dataset_uri\": \"<string>\",\n      \"extra\": {},\n      \"source_dag_id\": \"<string>\",\n      \"source_task_id\": \"<string>\",\n      \"source_run_id\": \"<string>\",\n      \"source_map_index\": \"<integer>\",\n      \"created_dagruns\": [\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"success\"\n        },\n        {\n          \"run_id\": \"<string>\",\n          \"dag_id\": \"<string>\",\n          \"logical_date\": \"<dateTime>\",\n          \"start_date\": \"<dateTime>\",\n          \"end_date\": \"<dateTime>\",\n          \"data_interval_start\": \"<dateTime>\",\n          \"data_interval_end\": \"<dateTime>\",\n          \"state\": \"running\"\n        }\n      ],\n      \"timestamp\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/events?limit=100&offset=<integer>&order_by=<string>&dataset_id=<integer>&source_dag_id=<string>&source_task_id=<string>&source_run_id=<string>&source_map_index=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												"events"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"description": "The numbers of items to return."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The number of items to skip before starting to collect the result set."
												},
												{
													"key": "order_by",
													"value": "<string>",
													"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
												},
												{
													"key": "dataset_id",
													"value": "<integer>",
													"description": "The Dataset ID that updated the dataset."
												},
												{
													"key": "source_dag_id",
													"value": "<string>",
													"description": "The DAG ID that updated the dataset."
												},
												{
													"key": "source_task_id",
													"value": "<string>",
													"description": "The task ID that updated the dataset."
												},
												{
													"key": "source_run_id",
													"value": "<string>",
													"description": "The DAG run ID that updated the dataset."
												},
												{
													"key": "source_map_index",
													"value": "<integer>",
													"description": "The map index that updated the dataset."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/events?limit=100&offset=<integer>&order_by=<string>&dataset_id=<integer>&source_dag_id=<string>&source_task_id=<string>&source_run_id=<string>&source_map_index=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												"events"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"description": "The numbers of items to return."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The number of items to skip before starting to collect the result set."
												},
												{
													"key": "order_by",
													"value": "<string>",
													"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
												},
												{
													"key": "dataset_id",
													"value": "<integer>",
													"description": "The Dataset ID that updated the dataset."
												},
												{
													"key": "source_dag_id",
													"value": "<string>",
													"description": "The DAG ID that updated the dataset."
												},
												{
													"key": "source_task_id",
													"value": "<string>",
													"description": "The task ID that updated the dataset."
												},
												{
													"key": "source_run_id",
													"value": "<string>",
													"description": "The DAG run ID that updated the dataset."
												},
												{
													"key": "source_map_index",
													"value": "<integer>",
													"description": "The map index that updated the dataset."
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/datasets/events?limit=100&offset=<integer>&order_by=<string>&dataset_id=<integer>&source_dag_id=<string>&source_task_id=<string>&source_run_id=<string>&source_map_index=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"datasets",
												"events"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"description": "The numbers of items to return."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The number of items to skip before starting to collect the result set."
												},
												{
													"key": "order_by",
													"value": "<string>",
													"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
												},
												{
													"key": "dataset_id",
													"value": "<integer>",
													"description": "The Dataset ID that updated the dataset."
												},
												{
													"key": "source_dag_id",
													"value": "<string>",
													"description": "The DAG ID that updated the dataset."
												},
												{
													"key": "source_task_id",
													"value": "<string>",
													"description": "The task ID that updated the dataset."
												},
												{
													"key": "source_run_id",
													"value": "<string>",
													"description": "The DAG run ID that updated the dataset."
												},
												{
													"key": "source_map_index",
													"value": "<integer>",
													"description": "The map index that updated the dataset."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List datasets",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/datasets?limit=100&offset=<integer>&order_by=<string>&uri_pattern=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"datasets"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								},
								{
									"key": "uri_pattern",
									"value": "<string>",
									"description": "If set, only return datasets with uris matching this pattern.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/datasets?limit=100&offset=<integer>&order_by=<string>&uri_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"datasets"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										},
										{
											"key": "uri_pattern",
											"value": "<string>",
											"description": "If set, only return datasets with uris matching this pattern.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"datasets\": [\n    {\n      \"id\": \"<integer>\",\n      \"uri\": \"<string>\",\n      \"extra\": {},\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\",\n      \"consuming_dags\": [\n        {\n          \"dag_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        },\n        {\n          \"dag_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        }\n      ],\n      \"producing_tasks\": [\n        {\n          \"dag_id\": \"<string>\",\n          \"task_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        },\n        {\n          \"dag_id\": \"<string>\",\n          \"task_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"id\": \"<integer>\",\n      \"uri\": \"<string>\",\n      \"extra\": {},\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\",\n      \"consuming_dags\": [\n        {\n          \"dag_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        },\n        {\n          \"dag_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        }\n      ],\n      \"producing_tasks\": [\n        {\n          \"dag_id\": \"<string>\",\n          \"task_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        },\n        {\n          \"dag_id\": \"<string>\",\n          \"task_id\": \"<string>\",\n          \"created_at\": \"<string>\",\n          \"updated_at\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/datasets?limit=100&offset=<integer>&order_by=<string>&uri_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"datasets"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										},
										{
											"key": "uri_pattern",
											"value": "<string>",
											"description": "If set, only return datasets with uris matching this pattern.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/datasets?limit=100&offset=<integer>&order_by=<string>&uri_pattern=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"datasets"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										},
										{
											"key": "uri_pattern",
											"value": "<string>",
											"description": "If set, only return datasets with uris matching this pattern.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "config",
			"item": [
				{
					"name": "section",
					"item": [
						{
							"name": "{section}",
							"item": [
								{
									"name": "option",
									"item": [
										{
											"name": "{option}",
											"item": [
												{
													"name": "Get a option from configuration",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/config/section/:section/option/:option",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"config",
																"section",
																":section",
																"option",
																":option"
															],
															"variable": [
																{
																	"key": "section",
																	"value": "<string>"
																},
																{
																	"key": "option",
																	"value": "<string>"
																}
															]
														}
													},
													"response": [
														{
															"name": "Success.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/config/section/:section/option/:option",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"config",
																		"section",
																		":section",
																		"option",
																		":option"
																	],
																	"variable": [
																		{
																			"key": "section"
																		},
																		{
																			"key": "option"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"sections\": [\n    {\n      \"name\": \"<string>\",\n      \"options\": [\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"name\": \"<string>\",\n      \"options\": [\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
														},
														{
															"name": "Request not authenticated due to missing, invalid, authentication info.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/config/section/:section/option/:option",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"config",
																		"section",
																		":section",
																		"option",
																		":option"
																	],
																	"variable": [
																		{
																			"key": "section"
																		},
																		{
																			"key": "option"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "Client does not have sufficient permission.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/config/section/:section/option/:option",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"config",
																		"section",
																		":section",
																		"option",
																		":option"
																	],
																	"variable": [
																		{
																			"key": "section"
																		},
																		{
																			"key": "option"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														},
														{
															"name": "A specified resource is not found.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/config/section/:section/option/:option",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"config",
																		"section",
																		":section",
																		"option",
																		":option"
																	],
																	"variable": [
																		{
																			"key": "section"
																		},
																		{
																			"key": "option"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Get current configuration",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/config?section=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"config"
							],
							"query": [
								{
									"key": "section",
									"value": "<string>",
									"description": "If given, only return config of this section."
								}
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/config?section=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"config"
									],
									"query": [
										{
											"key": "section",
											"value": "<string>",
											"description": "If given, only return config of this section."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"sections\": [\n    {\n      \"name\": \"<string>\",\n      \"options\": [\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"name\": \"<string>\",\n      \"options\": [\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"key\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/config?section=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"config"
									],
									"query": [
										{
											"key": "section",
											"value": "<string>",
											"description": "If given, only return config of this section."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/config?section=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"config"
									],
									"query": [
										{
											"key": "section",
											"value": "<string>",
											"description": "If given, only return config of this section."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "A specified resource is not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/config?section=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"config"
									],
									"query": [
										{
											"key": "section",
											"value": "<string>",
											"description": "If given, only return config of this section."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "health",
			"item": [
				{
					"name": "Get instance status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Get the status of Airflow's metadatabase, triggerer and scheduler. It includes info about\nmetadatabase and last heartbeat of scheduler and triggerer.\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"metadatabase\": {\n    \"status\": \"unhealthy\"\n  },\n  \"scheduler\": {\n    \"status\": \"healthy\",\n    \"latest_scheduler_heartbeat\": \"<string>\"\n  },\n  \"triggerer\": {\n    \"status\": \"unhealthy\",\n    \"latest_triggerer_heartbeat\": \"<string>\"\n  },\n  \"dag_processor\": {\n    \"status\": \"unhealthy\",\n    \"latest_dag_processor_heartbeat\": \"<string>\"\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "version",
			"item": [
				{
					"name": "Get version information",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"<string>\",\n  \"git_version\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "plugins",
			"item": [
				{
					"name": "Get a list of loaded plugins",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugins?limit=100&offset=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								}
							]
						},
						"description": "Get a list of loaded plugins.\n\n*New in version 2.1.0*\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins?limit=100&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"plugins\": [\n    {\n      \"name\": \"<string>\",\n      \"hooks\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"executors\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"source\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"hooks\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"executors\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"source\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins?limit=100&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins?limit=100&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "A specified resource is not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins?limit=100&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "roles",
			"item": [
				{
					"name": "{role_name}",
					"item": [
						{
							"name": "Get a role",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles/:role_name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":role_name"
									],
									"variable": [
										{
											"key": "role_name",
											"value": "<string>"
										}
									]
								},
								"description": "Get a role.\n\n*New in version 2.1.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update a role",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles/:role_name?update_mask=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":role_name"
									],
									"query": [
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										}
									],
									"variable": [
										{
											"key": "role_name",
											"value": "<string>"
										}
									]
								},
								"description": "Update a role.\n\n*New in version 2.1.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}"
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete a role",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles/:role_name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":role_name"
									],
									"variable": [
										{
											"key": "role_name",
											"value": "<string>"
										}
									]
								},
								"description": "Delete a role.\n\n*New in version 2.1.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:role_name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List roles",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/roles?limit=100&offset=<integer>&order_by=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								}
							]
						},
						"description": "Get a list of roles.\n\n*New in version 2.1.0*\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"roles\": [\n    {\n      \"name\": \"<string>\",\n      \"actions\": [\n        {\n          \"action\": {\n            \"name\": \"<string>\"\n          },\n          \"resource\": {\n            \"name\": \"<string>\"\n          }\n        },\n        {\n          \"action\": {\n            \"name\": \"<string>\"\n          },\n          \"resource\": {\n            \"name\": \"<string>\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"<string>\",\n      \"actions\": [\n        {\n          \"action\": {\n            \"name\": \"<string>\"\n          },\n          \"resource\": {\n            \"name\": \"<string>\"\n          }\n        },\n        {\n          \"action\": {\n            \"name\": \"<string>\"\n          },\n          \"resource\": {\n            \"name\": \"<string>\"\n          }\n        }\n      ]\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a role",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Create a new role.\n\n*New in version 2.1.0*\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Client specified an invalid argument.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"actions\": [\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    },\n    {\n      \"action\": {\n        \"name\": \"<string>\"\n      },\n      \"resource\": {\n        \"name\": \"<string>\"\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "permissions",
			"item": [
				{
					"name": "List permissions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/permissions?limit=100&offset=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"permissions"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								}
							]
						},
						"description": "Get a list of permissions.\n\n*New in version 2.1.0*\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/permissions?limit=100&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"actions\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/permissions?limit=100&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/permissions?limit=100&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{username}",
					"item": [
						{
							"name": "Get a user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "<string>"
										}
									]
								},
								"description": "Get a user with a specific username.\n\n*New in version 2.1.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update a user",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:username?update_mask=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"query": [
										{
											"key": "update_mask",
											"value": "<string>,<string>",
											"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
										}
									],
									"variable": [
										{
											"key": "username",
											"value": "<string>"
										}
									]
								},
								"description": "Update fields for a user.\n\n*New in version 2.2.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\"\n}"
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username?update_mask=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"query": [
												{
													"key": "update_mask",
													"value": "<string>,<string>",
													"description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
												}
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete a user",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "<string>"
										}
									]
								},
								"description": "Delete a user with a specific username.\n\n*New in version 2.2.0*\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Client specified an invalid argument.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Request not authenticated due to missing, invalid, authentication info.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "Client does not have sufficient permission.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								},
								{
									"name": "A specified resource is not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?limit=100&offset=<integer>&order_by=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "The numbers of items to return."
								},
								{
									"key": "offset",
									"value": "<integer>",
									"description": "The number of items to skip before starting to collect the result set."
								},
								{
									"key": "order_by",
									"value": "<string>",
									"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
								}
							]
						},
						"description": "Get a list of users.\n\n*New in version 2.1.0*\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"users\": [\n    {\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"email\": \"<string>\",\n      \"active\": \"<boolean>\",\n      \"last_login\": \"<string>\",\n      \"login_count\": \"<integer>\",\n      \"failed_login_count\": \"<integer>\",\n      \"roles\": [\n        {\n          \"name\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\"\n        }\n      ],\n      \"created_on\": \"<string>\",\n      \"changed_on\": \"<string>\"\n    },\n    {\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"email\": \"<string>\",\n      \"active\": \"<boolean>\",\n      \"last_login\": \"<string>\",\n      \"login_count\": \"<integer>\",\n      \"failed_login_count\": \"<integer>\",\n      \"roles\": [\n        {\n          \"name\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\"\n        }\n      ],\n      \"created_on\": \"<string>\",\n      \"changed_on\": \"<string>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?limit=100&offset=<integer>&order_by=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"description": "The numbers of items to return."
										},
										{
											"key": "offset",
											"value": "<integer>",
											"description": "The number of items to skip before starting to collect the result set."
										},
										{
											"key": "order_by",
											"value": "<string>",
											"description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a new user with unique username and email.\n\n*New in version 2.2.0*\n"
					},
					"response": [
						{
							"name": "Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}"
						},
						{
							"name": "Client specified an invalid argument.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Request not authenticated due to missing, invalid, authentication info.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Client does not have sufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						},
						{
							"name": "An existing resource conflicts with the request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"last_login\": \"<string>\",\n  \"login_count\": \"<integer>\",\n  \"failed_login_count\": \"<integer>\",\n  \"roles\": [\n    {\n      \"name\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\"\n    }\n  ],\n  \"created_on\": \"<string>\",\n  \"changed_on\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<string>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\",\n  \"instance\": \"<string>\"\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "test",
				"type": "string"
			},
			{
				"key": "username",
				"value": "test",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "160.85.252.164:8080/api/v1"
		}
	]
}